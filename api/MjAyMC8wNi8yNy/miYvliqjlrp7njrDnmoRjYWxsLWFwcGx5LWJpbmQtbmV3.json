{"title":"手动实现的call,apply,bind,new","date":"2020-06-27T19:52:13.000Z","date_formatted":{"ll":"Jun 27, 2020","L":"06/27/2020","MM-DD":"06-27"},"link":"2020/06/27/手动实现的call-apply-bind-new","tags":["apply","bind","call","new"],"categories":["前端"],"updated":"2023-10-16T08:07:11.643Z","content":"<h4 id=\"call\">call<a title=\"#call\" href=\"#call\"></a></h4>\n<p><code>call()</code> 方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数<br>\n语法：<code>function.call(thisArg, arg1, arg2, ...)</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mycall</span> = <span class=\"keyword\">function</span> (<span class=\"params\">thisArg, ...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//console.log(this)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;error&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;fn&#x27;</span>) <span class=\"comment\">// 声明一个独有的Symbol属性, 防止fn覆盖已有属性</span></span><br><span class=\"line\">  thisArg = thisArg || <span class=\"variable language_\">global</span> || <span class=\"variable language_\">window</span> <span class=\"comment\">// 若没有传入this, 默认绑定window对象</span></span><br><span class=\"line\">  thisArg[fn] = <span class=\"variable language_\">this</span> <span class=\"comment\">// this指向调用call的对象,即我们要改变this指向的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = thisArg[fn](...args) <span class=\"comment\">// 执行当前函数</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> thisArg[fn] <span class=\"comment\">// 删除我们声明的fn属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">greet</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> reply = [<span class=\"variable language_\">this</span>.<span class=\"property\">animal</span>, <span class=\"string\">&#x27;typically sleep between&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">sleepDuration</span>].<span class=\"title function_\">join</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reply)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">global</span>.<span class=\"property\">obj</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">animal</span>: <span class=\"string\">&#x27;cats&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sleepDuration</span>: <span class=\"string\">&#x27;12 and 16 hours&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">greet</span>()<span class=\"comment\">// typically sleep between</span></span><br><span class=\"line\">greet.<span class=\"title function_\">mycall</span>(obj)<span class=\"comment\">//cats typically sleep between 12 and 16 hours</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"apply\">apply<a title=\"#apply\" href=\"#apply\"></a></h4>\n<p><code>apply()</code> 方法调用一个具有给定this值的函数，以及作为一个数组（或类似数组对象）提供的参数。<br>\n语法：<code>func.apply(thisArg, [argsArray])</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myApply</span> = <span class=\"keyword\">function</span> (<span class=\"params\">thisArg, args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;error&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;fn&#x27;</span>) <span class=\"comment\">// 声明一个独有的Symbol属性, 防止fn覆盖已有属性</span></span><br><span class=\"line\">  thisArg = thisArg || <span class=\"variable language_\">window</span> <span class=\"comment\">// 若没有传入this, 默认绑定window对象</span></span><br><span class=\"line\">  thisArg[fn] = <span class=\"variable language_\">this</span> <span class=\"comment\">// this指向调用call的对象,即我们要改变this指向的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = thisArg[fn](...args) <span class=\"comment\">// 执行当前函数</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> thisArg[fn] <span class=\"comment\">// 删除我们声明的fn属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result <span class=\"comment\">// 返回函数执行结果</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">greet.<span class=\"title function_\">myApply</span>(obj, [])<span class=\"comment\">//cats typically sleep between 12 and 16 hours</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"bind\">Bind<a title=\"#bind\" href=\"#bind\"></a></h4>\n<p><code>bind()</code> 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。<br>\n语法: <code>function.bind(thisArg, arg1, arg2, ...)</code><br>\n注意三点:</p>\n<ul>\n<li>bind()除了this还接收其他参数，bind()返回的函数也接收参数，这两部分的参数都要传给返回的函数</li>\n<li>new会改变this指向：如果bind绑定后的函数被new了，那么this指向会发生改变，指向当前函数的实例</li>\n<li>没有保留原函数在原型链上的属性和方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myBind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">thisArg, ...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Bind must be called on a function&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"comment\">// new优先级</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fbound = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    self.<span class=\"title function_\">apply</span>(</span><br><span class=\"line\">      <span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> self ? <span class=\"variable language_\">this</span> : thisArg,</span><br><span class=\"line\">      args.<span class=\"title function_\">concat</span>(<span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>))</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 继承原型上的属性和方法</span></span><br><span class=\"line\">  fbound.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(self.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fbound</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = greet.<span class=\"title function_\">bind</span>(obj)</span><br><span class=\"line\"><span class=\"title function_\">result</span>()<span class=\"comment\">//cats typically sleep between 12 and 16 hours</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"new\">new<a title=\"#new\" href=\"#new\"></a></h4>\n<p>首先我们要知道new做了什么</p>\n<ul>\n<li>创建一个新对象，并继承其构造函数的prototype，这一步是为了继承构造函数原型上的属性和方法</li>\n<li>执行构造函数，方法内的this被指定为该新实例，这一步是为了执行构造函数内的赋值操作</li>\n<li>返回新实例（规范规定，如果构造方法返回了一个对象，那么返回该对象，否则返回第一步创建的新对象）</li>\n</ul>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">myNew</span>(<span class=\"params\">item,...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(item.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\">    <span class=\"comment\">//这里要注意是否对象会有返回值</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = item.<span class=\"title function_\">apply</span>(obj,args)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> <span class=\"title function_\">item</span>()===<span class=\"literal\">undefined</span>?<span class=\"attr\">obj</span>:result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Book</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b1 = <span class=\"title function_\">myNew</span>(<span class=\"title class_\">Book</span>,<span class=\"string\">&quot;javaScript&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> b2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Book</span>(<span class=\"string\">&quot;javaScript&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>()</span><br><span class=\"line\"><span class=\"title class_\">Book</span>.<span class=\"title function_\">apply</span>(obj1,[<span class=\"string\">&quot;123&quot;</span>])</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1)<span class=\"comment\">//&#123; name: &#x27;123&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b1)<span class=\"comment\">//&#123; name: &#x27;javaScript&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b2)<span class=\"comment\">//&#123; name: &#x27;javaScript&#x27; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">objectFactory</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>(),</span><br><span class=\"line\">    <span class=\"title class_\">Constructor</span> = [].<span class=\"property\">shift</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">    obj.<span class=\"property\">__proto__</span> = <span class=\"title class_\">Constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"title class_\">Constructor</span>.<span class=\"title function_\">apply</span>(obj, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> ret === <span class=\"string\">&#x27;object&#x27;</span> ? ret : obj;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"JavaScript设计模式之观察者模式","link":"2020/07/25/JavaScript设计模式之观察者模式"},"next":{"title":"leeocde-148-链表排序","link":"2020/06/09/leeocde-链表排序"},"plink":"https://edsion11.github.io/2020/06/27/手动实现的call-apply-bind-new/","toc":[{"id":"call","title":"call","index":"1"},{"id":"apply","title":"apply","index":"2"},{"id":"bind","title":"Bind","index":"3"},{"id":"new","title":"new","index":"4"}]}