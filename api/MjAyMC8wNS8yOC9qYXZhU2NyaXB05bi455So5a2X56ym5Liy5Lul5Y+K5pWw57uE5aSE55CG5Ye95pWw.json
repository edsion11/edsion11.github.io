{"title":"javaScript常用字符串以及数组处理函数","date":"2020-05-28T21:37:39.000Z","date_formatted":{"ll":"May 28, 2020","L":"05/28/2020","MM-DD":"05-28"},"link":"2020/05/28/javaScript常用字符串以及数组处理函数","tags":["字符串","数组"],"updated":"2022-01-22T09:45:40.642Z","content":"<p>今天对javaScript常用的数组以及字符串函数做个总结</p>\n<h4 id=\"数组函数\">数组函数<a href=\"#数组函数\" title=\"数组函数\"></a></h4><h5 id=\"arrayprototypeconcat连接\">Array.prototype.concat()(连接)<a href=\"#arrayprototypeconcat连接\" title=\"Array.prototype.concat()(连接)\"></a></h5><p>  <code>concat()</code> 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p>\n<p>  官网介绍的语法：<code>var new_array = old_array.concat(value1[, value2[, ...[, valueN]]])</code></p>\n<p>  说明：<code>concat</code>方法创建一个新的数组，返回的是当前数组的一个浅拷贝，它由被调用的对象中的元素组成，每个参数的顺序依次是该参数的元素（如果参数是数组）或参数本身（如果参数不是数组）。它不会递归到嵌套数组参数中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例：</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,[<span class=\"number\">2</span>,[<span class=\"number\">3</span>,<span class=\"number\">4</span>]]]</span><br><span class=\"line\"><span class=\"keyword\">let</span> resultArr1 = arr1.concat(arr2)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(resultArr1)<span class=\"comment\">//[ 1, 2, 3, 2, 3, 4, [ 2, [ 3, 4 ] ] ]</span></span><br></pre></td></tr></table></figure><h5 id=\"arrayprototypeevery和arrayprototypesome\">Array.prototype.every()和Array.prototype.some()<a href=\"#arrayprototypeevery和arrayprototypesome\" title=\"Array.prototype.every()和Array.prototype.some()\"></a></h5><p><code>every()</code> 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。而<code>some()</code> 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> even = <span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> element % <span class=\"number\">2</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.some(even));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.every(even))</span><br><span class=\"line\"><span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = []</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.some(even));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.every(even))</span><br><span class=\"line\"><span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"comment\">//true</span></span><br><span class=\"line\">注意：如果用一个空数组进行测试，some在任何情况下它返回的都是<span class=\"literal\">false</span>。 every在任何情况下都返回<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure><h5 id=\"arrayprototypefill\">Array.prototype.fill()<a href=\"#arrayprototypefill\" title=\"Array.prototype.fill()\"></a></h5><p>fill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。参数：value,start,end.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj=&#123;</span><br><span class=\"line\">    a:<span class=\"number\">1</span>,</span><br><span class=\"line\">    b:<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = arr.fill(obj,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1)</span><br><span class=\"line\"><span class=\"comment\">//当一个对象传给value时，填充数组的是这个对象的引用。</span></span><br><span class=\"line\">obj.a=<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1)</span><br><span class=\"line\"><span class=\"comment\">//[ 1, 2, &#123; a: 1, b: 2 &#125;, 4 ]</span></span><br><span class=\"line\"><span class=\"comment\">//[ 1, 2, &#123; a: 3, b: 2 &#125;, 4 ]</span></span><br></pre></td></tr></table></figure><h5 id=\"arrayprototypefilter\">Array.prototype.filter()<a href=\"#arrayprototypefilter\" title=\"Array.prototype.filter()\"></a></h5><p>filter()字面意思就是过滤器，返回过滤后的数组元素，刚方法创建一个新数组，对原数组不做修改。接收参数和concat()相同，value:当前处理的元素，index,当前处理元素的index,array,调用filter()的函数本身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = arr.filter(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value&gt;=<span class=\"number\">3</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1)<span class=\"comment\">//[3,4]</span></span><br></pre></td></tr></table></figure><h5 id=\"arrayprototypefind和arrayprototypefindindex\">Array.prototype.find()和Array.prototype.findIndex()<a href=\"#arrayprototypefind和arrayprototypefindindex\" title=\"Array.prototype.find()和Array.prototype.findIndex()\"></a></h5><p>find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.find(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value&gt;=<span class=\"number\">3</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.findIndex(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>value&gt;=<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure><h5 id=\"arrayprototypeflat\">Array.prototype.flat()<a href=\"#arrayprototypeflat\" title=\"Array.prototype.flat()\"></a></h5><p><code>flat()</code> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。主要用处为数组扁平化，以及去除数组空值。该函数带有一个可选参数deep,默认为1.指定深度遍历的结构深度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,[<span class=\"number\">3</span>,<span class=\"number\">4</span>,[<span class=\"number\">5</span>,[<span class=\"number\">6</span>,[[[[<span class=\"number\">123</span>,[<span class=\"number\">2</span>],[]]]]] ]]],<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>, , ,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> array1 = array.flat(<span class=\"number\">456</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1)</span><br><span class=\"line\"><span class=\"comment\">//[1, 2, 3, 4, 5, 6,123, 2, 3, 4, 5, 6,3]</span></span><br><span class=\"line\">MDN官网列出了几种替代方法，这里列出其中一个。有机会再总结数组扁平化的方法，以及手写个flat</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatDeep</span>(<span class=\"params\">arr, d = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d &gt; <span class=\"number\">0</span> ? arr.reduce(<span class=\"function\">(<span class=\"params\">acc, val</span>) =&gt;</span> acc.concat(<span class=\"built_in\">Array</span>.isArray(val) ? flatDeep(val, d - <span class=\"number\">1</span>) : val), [])</span><br><span class=\"line\">        : arr.slice();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = flatDeep(array, <span class=\"literal\">Infinity</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br></pre></td></tr></table></figure><h5 id=\"arrayprototypeflatmap和arrayprototypemap\">Array.prototype.flatmap()和Array.prototype.map()<a href=\"#arrayprototypeflatmap和arrayprototypemap\" title=\"Array.prototype.flatmap()和Array.prototype.map()\"></a></h5><p><code>flatMap()</code> 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map 连着深度值为1的 flat 几乎相同，但 flatMap 通常在合并成一种方法的效率稍微高一些。它返回一个新的数组，其中每个元素都是回调函数的结果，并且结构深度 depth 值为1。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.map(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>[x*<span class=\"number\">2</span>]).flat())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> [x * <span class=\"number\">2</span>]));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.flatMap(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> [x * <span class=\"number\">2</span>]));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.flatMap(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> [[x * <span class=\"number\">2</span>]]));</span><br></pre></td></tr></table></figure><p>此外flatMap 能用于在map期间增删项目（也就是修改items的数量）。换句话说，它允许你遍历很多项使之成为另一些项（靠分别把它们放进去来处理），而不是总是一对一。 从这个意义上讲，它的作用类似于 filter的对立面。只需返回一个1项元素数组以保留该项，返回一个多元素数组以添加项，或返回一个0项元素数组以删除该项。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Let's say we want to remove all the negative numbers and split the odd numbers into an even number and a 1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">-3</span>, <span class=\"number\">20</span>, <span class=\"number\">17</span>, <span class=\"number\">-33</span>, <span class=\"number\">-4</span>, <span class=\"number\">18</span>]</span><br><span class=\"line\"><span class=\"comment\">//       |\\  \\  x   |  | \\   x   x   |</span></span><br><span class=\"line\"><span class=\"comment\">//      [4,1, 4,   20, 16, 1,       18]</span></span><br><span class=\"line\">a.flatMap( <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span></span><br><span class=\"line\">  (n &lt; <span class=\"number\">0</span>) ?      [] :</span><br><span class=\"line\">  (n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) ? [n] :</span><br><span class=\"line\">                 [n<span class=\"number\">-1</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// expected output: [4, 1, 4, 20, 16, 1, 18]</span></span><br></pre></td></tr></table></figure><p>对于map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一次提供的函数后的返回值。<br>以下列出map的常见用法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先是字符串引用</span><br><span class=\"line\"><span class=\"keyword\">let</span>  a = <span class=\"built_in\">Array</span>.prototype.map.call(<span class=\"string\">\"Hello World\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//querySelector应用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> elems = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'select option:checked'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> values = <span class=\"built_in\">Array</span>.prototype.map.call(elems, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj.value;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>map()中的坑点：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log([<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>].map(<span class=\"built_in\">parseInt</span>));</span><br><span class=\"line\"><span class=\"comment\">//[1,NaN,NaN]</span></span><br><span class=\"line\"><span class=\"comment\">//parseInt一般第一个参数是字符串，第二个参数是进制转换值</span></span><br><span class=\"line\"><span class=\"comment\">//原因是parseInt 经常被带着一个参数使用, 但是这里接受两个。第一个参数是一个表达式而第二个是callback function的基,Array.prototype.map 传递3个参数，第三个参数被parseInt忽视了</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>].map( <span class=\"function\"><span class=\"params\">str</span> =&gt;</span> <span class=\"built_in\">parseInt</span>(str) ));</span><br><span class=\"line\"><span class=\"comment\">//[1,2,3]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">returnInt</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(element, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>].map(returnInt));</span><br><span class=\"line\"><span class=\"comment\">//[1,2,3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当返回undefined 或没有返回任何内容时:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> filteredNumbers = numbers.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(index &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// filteredNumbers is [1, 2, 3, undefined]</span></span><br><span class=\"line\"><span class=\"comment\">// numbers is still [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h5 id=\"arrayprototypeforeach\">Array.prototype.forEach()<a href=\"#arrayprototypeforeach\" title=\"Array.prototype.forEach()\"></a></h5><p><code>forEach()</code> 方法按升序为数组中含有效值的每一项执行一次 callback 函数，那些已删除或者未初始化的项将被跳过（例如在稀疏数组上）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里是一个使用thisArg的例子</span><br><span class=\"line\">thisArg 参数（<span class=\"keyword\">this</span>）传给了 forEach()，每次调用时，它都被传给 callback 函数，作为它的 <span class=\"keyword\">this</span> 值。</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.count = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Counter.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  array.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">entry</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sum += entry;</span><br><span class=\"line\">    ++<span class=\"keyword\">this</span>.count;</span><br><span class=\"line\">  &#125;, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"comment\">// ^---- Note</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> Counter();</span><br><span class=\"line\">obj.add([<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>]);</span><br><span class=\"line\">obj.count;</span><br><span class=\"line\"><span class=\"comment\">// 3 === (1 + 1 + 1)</span></span><br><span class=\"line\">obj.sum;</span><br><span class=\"line\"><span class=\"comment\">// 16 === (2 + 5 + 9)</span></span><br><span class=\"line\"></span><br><span class=\"line\">复制对象</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copy</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> copy = <span class=\"built_in\">Object</span>.create(<span class=\"built_in\">Object</span>.getPrototypeOf(obj));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> propNames = <span class=\"built_in\">Object</span>.getOwnPropertyNames(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">  propNames.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> desc = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj, name);</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(copy, name, desc);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">如果数组在迭代时被修改了，则其他元素会被跳过。</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = copy(obj1);</span><br><span class=\"line\"><span class=\"keyword\">var</span> words = [<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>, <span class=\"string\">'four'</span>];</span><br><span class=\"line\">words.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">word</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(word);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (word === <span class=\"string\">'two'</span>) &#123;</span><br><span class=\"line\">    words.shift();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"comment\">// two</span></span><br><span class=\"line\"><span class=\"comment\">// four</span></span><br><span class=\"line\">还可以用作扁平化数组</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatten</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  arr.forEach(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(i))</span><br><span class=\"line\">      result.push(...flatten(i));</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      result.push(i);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","prev":{"title":"JavaScript常用字符串以及数组处理函数2","link":"2020/06/05/JavaScript常用字符串以及数组处理函数2"},"next":{"title":"你不知道的JavaScript（一）","link":"2020/05/19/你不知道的JavaScript（一）"},"plink":"https://edsion11.github.io/2020/05/28/javaScript常用字符串以及数组处理函数/","toc":[{"id":"数组函数","title":"数组函数","index":"1"}],"copyright":{"author":"Edsion Gu","link":"<a href=\"https://edsion11.github.io/2020/05/28/javaScript常用字符串以及数组处理函数/\" title=\"javaScript常用字符串以及数组处理函数\">https://edsion11.github.io/2020/05/28/javaScript常用字符串以及数组处理函数/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}