{"title":"Ant Design Select组件弹出选项跟随外部容器scroll问题记录","date":"2023-10-13T15:24:38.000Z","date_formatted":{"ll":"Oct 13, 2023","L":"10/13/2023","MM-DD":"10-13"},"link":"2023/10/13/Ant-Design-Select组件弹出选项跟随外部容器scroll问题记录","tags":["ant design","bugfix","react"],"categories":["前端"],"updated":"2023-10-16T08:23:30.318Z","content":"<h3 id=\"问题阐述\">问题阐述<a title=\"#问题阐述\" href=\"#问题阐述\"></a></h3>\n<p>起因是测试提了 bug 在飞书项目上，截图是说下拉框的内容飘在页面别的地方，当时看到图片的第一反应：是不是浏览器渲染卡了抑或是偶现 bug，反正压根没往代码上面去想，先把优先级降到了 P2，在后来忙完了的时候，再回过头来梳理项目缺陷，看到这个还没 close 掉，于是开始认真看这个 bug。<br>\n<video src='/images/bug_screen_1.mp4' type='video/mp4' controls='controls'  width='100%' height='50%'><br>\n</video></p>\n<h3 id=\"想法\">想法<a title=\"#想法\" href=\"#想法\"></a></h3>\n<p>首先是本地启动项目后，在 Chrome devtool 中查看下拉框的样式可以发现这个弹出的选择框行内样式为绝对定位：<br>\n<img src=\"/images/ant-design-select.png\" alt=\"devtools\" loading=\"lazy\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\"><span class=\"attribute\">left</span>: <span class=\"number\">900px</span>;</span><br><span class=\"line\"><span class=\"attribute\">top</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.ant-select-dropdown</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在每次点击下拉框展开时，<code>left</code>和<code>top</code>属性都会变化，推测是实时计算得出的值，看到这里反应是<code>Select</code>组件的父元素没设置<code>position: relative</code>，仔细观察发现这个组件弹出框是渲染在最外层<code>DOM</code>结构下，所以排除这个原因。接着看了半天也没看出来原因，于是去 github issues 下面找找，看别人是否也有遇到这个问题，找到一个很类似的问题发现了答案：<br>\n<a href=\"https://github.com/ant-design/ant-design/issues/3438\" target=\"_blank\">Github ant-design Popover and Select #3438</a><br>\n官方文档也有说明<a href=\"https://ant.design/docs/react/faq-cn\" target=\"_blank\">整理了一些 Ant Design 社区常见的问题和官方答复</a></p>\n<h3 id=\"select-dropdown-datepicker-timepicker-popover-popconfir-会跟随滚动条上下移动\"><code>Select Dropdown DatePicker TimePicker Popover Popconfir</code> 会跟随滚动条上下移动<a title=\"#select-dropdown-datepicker-timepicker-popover-popconfir-会跟随滚动条上下移动\" href=\"#select-dropdown-datepicker-timepicker-popover-popconfir-会跟随滚动条上下移动\"></a></h3>\n<p>使用 <code>&lt;Select getPopupContainer=&#123;trigger =&gt; trigger.parentElement&#125;&gt;</code><a href=\"https://ant.design/components/config-provider-cn#api\" target=\"_blank\">API 文档</a>来将组件渲染到滚动区域内，或者使用其他的 <code>getXxxxContainer</code> 参数。如果需要全局解决这个问题，可以使用 <code>&lt;ConfigProvider getPopupContainer=&#123;trigger =&gt; trigger.parentElement&#125;&gt;</code><a href=\"https://ant.design/components/config-provider-cn#api\" target=\"_blank\">API 文档</a></p>\n<p>并且保证 <code>parentElement</code> 是 <code>position: relative</code> 或 <code>position: absolute</code>。</p>\n<h3 id=\"解决\">解决<a title=\"#解决\" href=\"#解决\"></a></h3>\n<p>于是在组件<code>props</code>加上<code> getPopupContainer=&#123;(triggerNode) =&gt; triggerNode.parentNode &#125;</code>，问题得以解决，在点开下拉框后，滚动页面，下拉框的内容不会固定不动了</p>\n<h3 id=\"源码研究\">源码研究<a title=\"#源码研究\" href=\"#源码研究\"></a></h3>\n<p>再解决完 bug 之后再来看看为什么加上这个属性，就可以正常展示了，首先是加上这个属性之后，原本渲染在最外层 dom 的 Pop 组件渲染在正常文档流中，就是和选择框渲染在同一个 dom 中<br>\n组件结构：<br>\n<code>&lt;Select/&gt; =&gt; &lt;Trigger ... getPopupContainer=&#123;props.getPopupContainer&#125; /&gt;</code></p>\n<p><code>&lt;Popup ... target=&#123;targetEle&#125; getPopupContainer=&#123;getPopupContainer&#125;/&gt;</code></p>\n<p><code>&lt;Portal ... getContainer=&#123;getPopupContainer &amp;&amp; (() =&gt; getPopupContainer(target))&#125;/&gt;</code><br>\n看了一下整个组件的层级，首先<code>getPopupContainer</code>函数先传入，<code>getPopupContainer</code>函数的类型定义如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> declare type <span class=\"title class_\">RenderDOMFunc</span> = <span class=\"function\">(<span class=\"params\">props: any</span>) =&gt;</span> <span class=\"title class_\">HTMLElement</span>;</span><br></pre></td></tr></table></figure>\n<p>它的功能是返回一个 dom 元素，<code>HtmlElement</code>的定义是：</p>\n<blockquote>\n<p>The HTMLElement interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.<br>\n<img src=\"/images/HtmlElement.png\" alt=\"图示\" loading=\"lazy\"><br>\n这个函数有个入参是在<code>Popup</code>组件传入的:</p>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption><span>&#123;1,2,4-5&#125;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// =========================== Target ===========================</span></span><br><span class=\"line\"><span class=\"comment\">// Use state to control here since `useRef` update not trigger render</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [targetEle, setTargetEle] = <span class=\"title class_\">React</span>.<span class=\"property\">useState</span>&lt;<span class=\"title class_\">HTMLElement</span>&gt;(<span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> setTargetRef = <span class=\"title function_\">useEvent</span>(<span class=\"function\">(<span class=\"params\">node: HTMLElement</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isDOM</span>(node) &amp;&amp; targetEle !== node) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setTargetEle</span>(node);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//... 这里渲染的是下拉框Select的点击交互组件</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ResizeObserver</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">  <span class=\"attr\">disabled</span>=<span class=\"string\">&#123;!mergedOpen&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">  <span class=\"attr\">ref</span>=<span class=\"string\">&#123;setTargetRef&#125;</span> // <span class=\"attr\">获取Select实际dom元素</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">  <span class=\"attr\">onResize</span>=<span class=\"string\">&#123;onTargetResize&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">TriggerWrapper</span> <span class=\"attr\">getTriggerDOMNode</span>=<span class=\"string\">&#123;getTriggerDOMNode&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    &#123;triggerNode&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">TriggerWrapper</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">ResizeObserver</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里渲染的是下拉框的弹出框内容组件 render Popup component=&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Popup</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">portal</span>=<span class=\"string\">&#123;PortalComponent&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">ref</span>=<span class=\"string\">&#123;setPopupRef&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">target</span>=<span class=\"string\">&#123;targetEle&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">getPopupContainer</span>=<span class=\"string\">&#123;getPopupContainer&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">...</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">/&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>上面是<code>rc-trigger</code>组件与<code>getPopupContainer</code>的主要逻辑，即获取到<code>Select</code>组件的实际dom保存下来传递给<code>Popup</code>组件,然后在<code>Popup</code>组件中使用：<br>\n<code>&lt;Portal open=&#123;forceRender || isNodeVisible&#125; getContainer=&#123;getPopupContainer &amp;&amp; (() =&gt; getPopupContainer(target))&#125; autoDestroy&#123;autoDestroy&#125; /&gt;</code><br>\n接下来是<code>portal</code>组件的实现，比较简单的渲染逻辑，默认渲染在<code>body</code>下，当有<code>getContainer()</code>时，会根据传入的<code>dom</code>渲染</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Portal component</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface <span class=\"title class_\">PortalProps</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/** Customize container element. Default will create a div in document.body when `open` */</span></span><br><span class=\"line\">  getContainer?: <span class=\"title class_\">GetContainer</span>;</span><br><span class=\"line\">  children?: <span class=\"title class_\">React</span>.<span class=\"property\">ReactNode</span>;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getPortalContainer</span> = (<span class=\"params\">getContainer: GetContainer</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (getContainer === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title function_\">canUseDom</span>() || !getContainer) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> getContainer === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(getContainer);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> getContainer === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">getContainer</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> getContainer;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Portal</span> = <span class=\"title class_\">React</span>.<span class=\"property\">forwardRef</span>&lt;any, <span class=\"title class_\">PortalProps</span>&gt;(<span class=\"function\">(<span class=\"params\">props, ref</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    getContainer,</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125; = props;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [shouldRender, setShouldRender] = <span class=\"title class_\">React</span>.<span class=\"title function_\">useState</span>(open);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> mergedRender = shouldRender || open;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ========================= Warning =========================</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">warning</span>(</span><br><span class=\"line\">      <span class=\"title function_\">canUseDom</span>() || !open,</span><br><span class=\"line\">      <span class=\"string\">`Portal only work in client side. Please call &#x27;useEffect&#x27; to show Portal instead default render in SSR.`</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ====================== Should Render ======================</span></span><br><span class=\"line\">  <span class=\"title class_\">React</span>.<span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (autoDestroy || open) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setShouldRender</span>(open);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [open, autoDestroy]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ======================== Container ========================</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [innerContainer, setInnerContainer] = <span class=\"title class_\">React</span>.<span class=\"property\">useState</span>&lt;</span><br><span class=\"line\">    <span class=\"title class_\">ContainerType</span> | <span class=\"literal\">false</span></span><br><span class=\"line\">  &gt;(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">getPortalContainer</span>(getContainer));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">React</span>.<span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> customizeContainer = <span class=\"title function_\">getPortalContainer</span>(getContainer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Tell component that we check this in effect which is safe to be `null`</span></span><br><span class=\"line\">    <span class=\"title function_\">setInnerContainer</span>(customizeContainer ?? <span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [defaultContainer, queueCreate] = <span class=\"title function_\">useDom</span>(</span><br><span class=\"line\">    mergedRender &amp;&amp; !innerContainer,</span><br><span class=\"line\">    debug,</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">const</span> mergedContainer = innerContainer ?? defaultContainer;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ========================= Locker ==========================</span></span><br><span class=\"line\">  <span class=\"title function_\">useScrollLocker</span>(</span><br><span class=\"line\">    autoLock &amp;&amp;</span><br><span class=\"line\">      open &amp;&amp;</span><br><span class=\"line\">      <span class=\"title function_\">canUseDom</span>() &amp;&amp;</span><br><span class=\"line\">      (mergedContainer === defaultContainer ||</span><br><span class=\"line\">        mergedContainer === <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>),</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// =========================== Ref ===========================</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">childRef</span>: <span class=\"title class_\">React</span>.<span class=\"property\">Ref</span>&lt;any&gt; = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (children &amp;&amp; <span class=\"title function_\">supportRef</span>(children) &amp;&amp; ref) &#123;</span><br><span class=\"line\">    (&#123; <span class=\"attr\">ref</span>: childRef &#125; = children <span class=\"keyword\">as</span> any);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> mergedRef = <span class=\"title function_\">useComposeRef</span>(childRef, ref);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ========================= Render ==========================</span></span><br><span class=\"line\">  <span class=\"comment\">// Do not render when nothing need render</span></span><br><span class=\"line\">  <span class=\"comment\">// When innerContainer is `undefined`, it may not ready since user use ref in the same render</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!mergedRender || !<span class=\"title function_\">canUseDom</span>() || innerContainer === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Render inline</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> renderInline = mergedContainer === <span class=\"literal\">false</span> || <span class=\"title function_\">inlineMock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">OrderContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;queueCreate&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;renderInline</span></span><br><span class=\"line\"><span class=\"language-xml\">        ? reffedChildren</span></span><br><span class=\"line\"><span class=\"language-xml\">        : createPortal(reffedChildren, mergedContainer)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">OrderContext.Provider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>所以加入<code>getPopupContainer=&#123;(triggerNode) =&gt; triggerNode.parentNode &#125;</code>这行代码的意义是让<code>Select</code>组件的<code>Popup</code>组件渲染在正常文档流的内部,这样不会和别的区域内容有重叠，以及滑动行为与主操作区域一致。</p>\n","next":{"title":"使用Angular Universal做ssr渲染","link":"2021/12/12/使用angular-universal做ssr渲染"},"plink":"https://edsion11.github.io/2023/10/13/Ant-Design-Select组件弹出选项跟随外部容器scroll问题记录/","toc":[{"id":"问题阐述","title":"问题阐述","index":"1"},{"id":"想法","title":"想法","index":"2"},{"id":"select-dropdown-datepicker-timepicker-popover-popconfir-会跟随滚动条上下移动","title":"Select Dropdown DatePicker TimePicker Popover Popconfir 会跟随滚动条上下移动","index":"3"},{"id":"解决","title":"解决","index":"4"},{"id":"源码研究","title":"源码研究","index":"5"}]}