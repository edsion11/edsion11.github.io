{"title":"leetcode-21-合并两个有序链表","date":"2020-04-20T15:27:03.000Z","date_formatted":{"ll":"Apr 20, 2020","L":"04/20/2020","MM-DD":"04-20"},"link":"2020/04/20/leetcode-21-合并两个有序链表","tags":["leetcode","双指针","递归"],"categories":["leetcode"],"updated":"2022-01-22T09:45:40.642Z","content":"<h4 id=\"题目\">题目<a title=\"#题目\" href=\"#题目\"></a></h4>\n<p>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p>\n<h4 id=\"示例\">示例<a title=\"#示例\" href=\"#示例\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">4</span>, <span class=\"number\">1</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span></span><br><span class=\"line\">输出：<span class=\"number\">1</span>-&gt;<span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>看到这道题第一个思路就是遍历其中一个链表，依次插入另一个链表。这个方法在官方解释为“迭代法”。<br>\n即我们假设<code>l1</code>元素严格比<code>l2</code>元素少，我们可以将<code>l2</code>中的元素逐一插入<code>l1</code>中正确的位置。</p>\n<h4 id=\"算法思路\">算法思路<a title=\"#算法思路\" href=\"#算法思路\"></a></h4>\n<p>首先建立一个新链表，指向空，接着建立一个“哨兵节点”<code>prevNode</code>用于不断<code>next</code>下一个添加新元素。重复遍历判断<code>l1</code>和<code>l2</code>的值，两者较小值插入，然后<code>prevNode.next</code>。一直到最后其中一个链表到达尾部指向 <code>null</code>,此时另一个链表剩余值一定比目前这个值大，所以直接连接在<code>prevNode</code>后面即可。具体实现如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mergeTwoLists = <span class=\"keyword\">function</span> (<span class=\"params\">l1, l2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prevHead = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(-<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prevNode = prevHead</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (l1 != <span class=\"literal\">null</span> &amp;&amp; l2 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1.<span class=\"property\">val</span> &lt;= l2.<span class=\"property\">val</span>) &#123;</span><br><span class=\"line\">      prevNode.<span class=\"property\">next</span> = l1</span><br><span class=\"line\">      l1 = l1.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      prevNode.<span class=\"property\">next</span> = l2</span><br><span class=\"line\">      l2 = l2.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    prevNode = prevNode.<span class=\"property\">next</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prevNode.<span class=\"property\">next</span> = l1 ? l1 : l2</span><br><span class=\"line\">  <span class=\"keyword\">return</span> prevHead.<span class=\"property\">next</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另一种方法是用递归方法，递归思想：递归的定义操作<code>merge</code>,比较两个链表头部较小的一个与剩下元素的<code>merge</code>操作结果合并。</p>\n<h4 id=\"递归算法思路\">递归算法思路<a title=\"#递归算法思路\" href=\"#递归算法思路\"></a></h4>\n<p>先判断递归终值，即判断<code>l1</code> ,<code>l2</code>为<code>null</code>的时候，<code>return</code>的值。递归内容：如果<code>l1</code>的<code>val</code>值更小，则将<code>l1.next</code>与排序好的链表头相接，<code>l2</code>同理。</p>\n<h5 id=\"具体实现如下\">具体实现如下<a title=\"#具体实现如下\" href=\"#具体实现如下\"></a></h5>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mergeLists = <span class=\"keyword\">function</span> (<span class=\"params\">l1, l2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l1 === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l2 === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l1.<span class=\"property\">val</span> &lt; l2.<span class=\"property\">val</span>) &#123;</span><br><span class=\"line\">    l1.<span class=\"property\">next</span> = <span class=\"title function_\">mergeLists</span>(l1.<span class=\"property\">next</span>, l2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l1</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    l2.<span class=\"property\">next</span> = <span class=\"title function_\">mergeLists</span>(l1, l2.<span class=\"property\">next</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"箭头函数","link":"2020/04/21/箭头函数"},"next":{"title":"webpack打包","link":"2020/04/19/webpack打包"},"plink":"https://edsion11.github.io/2020/04/20/leetcode-21-合并两个有序链表/","toc":[{"id":"题目","title":"题目","index":"1"},{"id":"示例","title":"示例","index":"2"},{"id":"算法思路","title":"算法思路","index":"3"},{"id":"递归算法思路","title":"递归算法思路","index":"4"}],"copyright":{"author":"Edsion Gu","link":"<a href=\"https://edsion11.github.io/2020/04/20/leetcode-21-合并两个有序链表/\" title=\"leetcode-21-合并两个有序链表\">https://edsion11.github.io/2020/04/20/leetcode-21-合并两个有序链表/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}