{"title":"Promise和Observable区别","date":"2020-05-12T11:32:27.000Z","date_formatted":{"ll":"May 12, 2020","L":"05/12/2020","MM-DD":"05-12"},"link":"2020/05/12/Promise和Observable区别","tags":["Observable","Promise"],"updated":"2022-01-22T09:45:40.641Z","content":"<p>最近学 Angular 看大漠老师的视频看到了 Observable 这块，Observable 是 Rxjs 库里异步编程核心的一部分，相比于 Rxjs 又有那些区别呢</p>\n<h3 id=\"&lt;h5&gt;observable-介绍&lt;/h5&gt;\"><h5>Observable 介绍</h5><a title=\"#&lt;h5&gt;observable-介绍&lt;/h5&gt;\" href=\"#&lt;h5&gt;observable-介绍&lt;/h5&gt;\"></a></h3>\n<p>RxJS 是一个库，它通过使用 observable 序列来编写异步和基于事件的程序。它提供了一个核心类型 Observable，附属类型 (Observer、 Schedulers、 Subjects) 和受 [Array#extras] 启发的操作符 (map、filter、reduce、every, 等等)，这些数组操作符可以把异步事件作为集合来处理。 ————引用 Rxjs 中文网站的介绍 ——<a href=\"https://cn.rx.js.org/manual/overview.html#observable-\" target=\"_blank\">Rxjs 官网</a></p>\n<h4 id=\"observable（可观察对象）\">Observable（可观察对象）<a title=\"#observable（可观察对象）\" href=\"#observable（可观察对象）\"></a></h4>\n<p>这里具体原理可参照 JavaScript 设计模式–观察，订阅模式</p>\n<ul>\n<li>在 RxJS 中用来解决异步事件管理的的基本概念是：</li>\n<li>-Observable (可观察对象): 表示一个概念，这个概念是一个可调用的未来值或事件的集合。</li>\n<li>Observer (观察者): 一个回调函数的集合，它知道如何去监听由 Observable 提供的值。</li>\n<li>Subscription (订阅): 表示 Observable 的执行，主要用于取消 Observable 的执行。</li>\n<li>Operators (操作符): 采用函数式编程风格的纯函数 (pure function)，使用像 map、filter、concat、flatMap 等这样的操作符来处理集合。</li>\n<li>Subject (主体): 相当于 EventEmitter，并且是将值或事件多路推送给多个 Observer 的唯一方式。</li>\n<li>Schedulers (调度器): 用来控制并发并且是中央集权的调度员，允许我们在发生计算时进行协调，例如 setTimeout 或 requestAnimationFrame 或其</li>\n</ul>\n<h4 id=\"使用-observable\">使用 Observable<a title=\"#使用-observable\" href=\"#使用-observable\"></a></h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Observable写法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//创建一个Observable对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Ob1</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  observer.<span class=\"title function_\">next</span>(<span class=\"string\">&#x27;observable&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title class_\">Ob1</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-promise\">使用 Promise<a title=\"#使用-promise\" href=\"#使用-promise\"></a></h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Pro1</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"comment\">//reject(2)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Pro1</span>.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Observable 与函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  console.log(<span class=\"string\">&#x27;Hello&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> foo.call(); <span class=\"comment\">// 等同于 foo()</span></span><br><span class=\"line\">console.log(x);</span><br><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> foo.call(); <span class=\"comment\">// 等同于 foo()</span></span><br><span class=\"line\">console.log(y);</span><br><span class=\"line\"><span class=\"comment\">//&quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//42</span></span><br><span class=\"line\"><span class=\"comment\">//&quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//42</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">用 Observables 重写上面的代码：</span><br><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">foo</span> <span class=\"operator\">=</span> Rx.Observable.create(function (observer) &#123;</span><br><span class=\"line\">  console.log(<span class=\"string\">&#x27;Hello&#x27;</span>);</span><br><span class=\"line\">  observer.next(<span class=\"number\">42</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">foo.subscribe(function (x) &#123;</span><br><span class=\"line\">  console.log(x);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">foo.subscribe(function (y) &#123;</span><br><span class=\"line\">  console.log(y);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//&quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//42</span></span><br><span class=\"line\"><span class=\"comment\">//&quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//42</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n<p>因为函数和 Observables 都是惰性运算。如果你不调用函数，console.log(‘Hello’) 就不会执行。Observables 也是如此，如果你不“调用”它(使用 subscribe)，console.log(‘Hello’) 也不会执行。此外，“调用”或“订阅”是独立的操作：两个函数调用会触发两个单独的副作用，两个 Observable 订阅同样也是触发两个单独的副作用。EventEmitters 共享副作用并且无论是否存在订阅者都会尽早执行，Observables 与之相反，不会共享副作用并且是延迟执行。</p>\n<h4 id=\"区别\">区别<a title=\"#区别\" href=\"#区别\"></a></h4>\n<h5 id=\"为什么用-rxjs\">为什么用 Rxjs<a title=\"#为什么用-rxjs\" href=\"#为什么用-rxjs\"></a></h5>\n<p>promise 相较于 Rxjs 而言功能更单一 promise 只能将一个数据的状态由 pending 转换成 resoloved 或者 rejected.而 Rxjs 可以处理多个数据对应 complete 和 error 状态但是 Rxjs 同时又拥有 next 方法。Observable 是惰性的，需要 subscribe 的时候才输出值。promise 内部状态是不可控制的，执行了就无法终止。而 Observable 可以定义如何取消异步方法。<br>\n比如如下的场景：</p>\n<p>输入框中输入字符，按回车发送一个请求，并将返回的结果变成一个 Todo item。如果在请求返回结果前又一次按下回车或 add 按钮，如果相同则不进行任何操作，如果不同则取消掉上次的请求并发送新的请求。（实际的场景往往是发送个 http 请求该请求会返回的很慢，业务上加上心跳检查（发送方按照一定规则（周期性发送、空闲发送等等）向接收方发送固定格式的消息，接受方收到消息后回复一个固定格式的消息，如果长时间没有收到，比如心跳周期的 3 倍，则认为当前连接失效，将其断开。），如果前一次在心跳间隔内无返回则再次调用请求，同时需要抛弃前一次请求的返回，并且此时有可能调用参数不一样的该接口从而造成数据不一致的问题）对于 Promise 实现我们不只要维护一个定时器 timer 同时还要维护一个全局变量。</p>\n<p>再比如我们需要监听页面滚动的事件，作出一些逻辑操作，这是就会产生事件过于频繁的调用，造成页面卡顿的现象。用原生 js 实现的时候，需要实现个节流或者防抖函数，通过实现个闭包函数，在内部维护个定时器。而在 Rxjs 中通过操作符 debounce 就可以方便的解决</p>\n<h5 id=\"同步与异步\">同步与异步<a title=\"#同步与异步\" href=\"#同步与异步\"></a></h5>\n<p>首先第一个区别是：Promise 是解决异步编程的方法，而 Observable 可以同步也可以异步</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Observable同步执行</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">create</span>(<span class=\"keyword\">function</span> (<span class=\"params\">observer</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello&#x27;</span>)</span><br><span class=\"line\">  observer.<span class=\"title function_\">next</span>(<span class=\"number\">42</span>)</span><br><span class=\"line\">  observer.<span class=\"title function_\">next</span>(<span class=\"number\">100</span>) <span class=\"comment\">// “返回”另外一个值</span></span><br><span class=\"line\">  observer.<span class=\"title function_\">next</span>(<span class=\"number\">200</span>) <span class=\"comment\">// 还可以再“返回”值</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;before&#x27;</span>)</span><br><span class=\"line\">foo.<span class=\"title function_\">subscribe</span>(<span class=\"keyword\">function</span> (<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&quot;before&quot;</span></span><br><span class=\"line\"><span class=\"comment\">&quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"comment\">42</span></span><br><span class=\"line\"><span class=\"comment\">100</span></span><br><span class=\"line\"><span class=\"comment\">200</span></span><br><span class=\"line\"><span class=\"comment\">&quot;after&quot;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;after&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Observable</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rxjs/Observable&#x27;</span>).<span class=\"property\">Observable</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> observable = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// observer.next(5);</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        observer.<span class=\"title function_\">next</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">observable.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27;!&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;And now we are here.&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">这个如果是直接next <span class=\"number\">5</span>,则输出是  <span class=\"number\">5</span>！ -&gt; <span class=\"title class_\">And</span> now we are here.</span><br><span class=\"line\">采用<span class=\"built_in\">setTimeout</span> next <span class=\"number\">5</span>， 则相反  <span class=\"title class_\">And</span> now we are here.-&gt; <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"单个值和多个值\">单个值和多个值<a title=\"#单个值和多个值\" href=\"#单个值和多个值\"></a></h5>\n<p>Observable 里面的 next()方法类似与 Promise.resolve(),但是 Promise()内部的 resolve()方法成功后，后面的不会执行，就是说 Observable 可以持续发射很多值，而 Promise 只能发射一个值就结束了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27; I am promise &#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> observable1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;I am Observable!&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Promise 里的 console.log 会执行，而 Observable 里的代码不会输出，只有订阅（subscribe）之后才会输出</p>\n<h5 id=\"异步执行任务的取消\">异步执行任务的取消<a title=\"#异步执行任务的取消\" href=\"#异步执行任务的取消\"></a></h5>\n<p>Promise 的执行默认是不可取消的，而 Observable 是可以通过 subscribe 的 unsubscribe()方法来取消<br>\n因为在 Promise 中.then()返回的是一个新的 Promise 对象，而 Observable+subscribe 返回的是 subscription 对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">Observable</span> <span class=\"operator\">=</span> require(<span class=\"string\">&#x27;rxjs/Observable&#x27;</span>).Observable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">observable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>((observer) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"type\">let</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> setInterval(() =&gt; &#123;</span><br><span class=\"line\">        observer.next(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> () =&gt; clearInterval(token);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">subscription</span> <span class=\"operator\">=</span> observable.subscribe(value =&gt; console.log(value + <span class=\"string\">&#x27;!&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    subscription.unsubscribe();</span><br><span class=\"line\">&#125;, <span class=\"number\">5000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>!</span><br><span class=\"line\"><span class=\"number\">1</span>!</span><br><span class=\"line\"><span class=\"number\">2</span>!</span><br><span class=\"line\"><span class=\"number\">3</span>!</span><br><span class=\"line\"><span class=\"comment\">//Observable</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"一次和多次执行\">一次和多次执行<a title=\"#一次和多次执行\" href=\"#一次和多次执行\"></a></h5>\n<p>Promise 只会执行一次 resolve(),而 Observable 每次订阅都会执行一次观察对象中的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Promise</span></span><br><span class=\"line\">let time;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">waitOneSecondPromise</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>((resolve) =&gt; &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">&#x27;promise call&#x27;</span>)</span><br><span class=\"line\">    time = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().getTime();</span><br><span class=\"line\">    setTimeout(() =&gt; resolve(<span class=\"string\">&#x27;hello world&#x27;</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondPromise.then((value) =&gt; &#123;console.log( <span class=\"string\">&#x27;第一次&#x27;</span>, value, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().getTime() - time)&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    waitOneSecondPromise.then((value) =&gt; &#123;console.log(<span class=\"string\">&#x27;第二次&#x27;</span>, value, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().getTime() - time)&#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">5000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出结果是 promise call</span></span><br><span class=\"line\">第一次 hello world <span class=\"number\">1007</span></span><br><span class=\"line\">第二次 hello world <span class=\"number\">5006</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Observable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">Observable</span> <span class=\"operator\">=</span> require(<span class=\"string\">&#x27;rxjs/Observable&#x27;</span>).Observable;</span><br><span class=\"line\"></span><br><span class=\"line\">let time;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">waitOneSecondObservable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>((observer) =&gt; &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">&#x27;I was called&#x27;</span>);</span><br><span class=\"line\">    time = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().getTime();</span><br><span class=\"line\">    setTimeout(() =&gt; observer.next(<span class=\"string\">&#x27;hey girl&#x27;</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondObservable.subscribe((value) =&gt; &#123;console.log( <span class=\"string\">&#x27;第一次&#x27;</span>, value, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().getTime() - time)&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    waitOneSecondObservable.subscribe((value) =&gt; &#123;console.log( <span class=\"string\">&#x27;第二次&#x27;</span>, value, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().getTime() - time)&#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">5000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">I was called</span><br><span class=\"line\">第一次 hey girl <span class=\"number\">1003</span></span><br><span class=\"line\">I was called</span><br><span class=\"line\">第二次 hey girl <span class=\"number\">1003</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"工具\">工具<a title=\"#工具\" href=\"#工具\"></a></h5>\n<p>Observable 提供了很多的工具函数，常用的 filter 和 map 演示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stream2$ =</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>() &lt;</span><br><span class=\"line\">  number &gt;</span><br><span class=\"line\">  (<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> interval = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      observer.<span class=\"title function_\">next</span>(count++)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(interval)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">stream2$.<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Observable&gt;&#x27;</span> + value))</span><br><span class=\"line\">stream2$</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> val % <span class=\"number\">2</span> == <span class=\"number\">0</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;filter&gt;&#x27;</span> + value))</span><br><span class=\"line\">stream2$</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> value * value))</span><br><span class=\"line\">  .<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;map&gt;&#x27;</span> + value))</span><br></pre></td></tr></table></figure>\n<h5 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h5>\n<ul>\n<li>Observable 是 lazy 的，只有订阅才输出，同时 Observable 可以接受多个值。Promise 只能 resolve 一次。</li>\n<li>Promise 内部 resolve 一定是异步的，而 Observable 则可以自由发挥</li>\n<li>Promise 只会执行一次，创建之后就会执行，不能重复执行，而 Observable 每订阅一次会执行一次，而如果想只执行一次，可以利用 share。</li>\n<li>Promise 不可以取消，而 Observable 可以取消</li>\n</ul>\n","prev":{"title":"你不知道的JavaScript（一）","link":"2020/05/19/你不知道的JavaScript（一）"},"next":{"title":"Promise从入门到放弃","link":"2020/04/28/Promise从入门到放弃"},"plink":"https://edsion11.github.io/2020/05/12/Promise和Observable区别/","toc":[{"id":"<h5>observable-介绍</h5>","title":"Observable 介绍","index":"1","children":[{"id":"observable（可观察对象）","title":"Observable（可观察对象）","index":"1.1"},{"id":"使用-observable","title":"使用 Observable","index":"1.2"},{"id":"使用-promise","title":"使用 Promise","index":"1.3"},{"id":"区别","title":"区别","index":"1.4"}]}]}