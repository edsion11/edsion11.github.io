{"title":"Vue双向绑定","date":"2020-04-08T14:27:04.000Z","date_formatted":{"ll":"Apr 8, 2020","L":"04/08/2020","MM-DD":"04-08"},"link":"2020/04/08/Vue双向绑定","tags":["Vue"],"updated":"2022-01-22T09:45:40.642Z","content":"<p>Vue的双向绑定是v-model指令</p>\n<p>具体的实现原理是用了js中的<code>Object.defineProperty</code>方法来修改目标对象的属性</p>\n<img src=\"https://vue-js.com/learn-vue/assets/img/3.0b99330d.jpg\">\n先看看Vue中源码中的解释:\n<a href=\"https://github.com/vuejs/vue/blob/dev/src/core/observer/index.js\">源码地址</a>\n<h4>1.使Object数据变得可侦测 </h4>\n<p>数据的每次读和写能够被我们看的见，即我们能够知道数据什么时候被读取了或数据什么时候被改写了，我们将其称为数据变的‘可观测’。</p>\n<p>要将数据变的‘可观测’，我们就要借助前言中提到的<code>Object.defineProperty</code>方法了，在本文中，我们就使用这个方法使数据变得“可观测”。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Obj</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">val</span>: <span class=\"string\">&#x27;hello&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">Obj</span>, <span class=\"string\">&#x27;val&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;数据已读取&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;数据已修改&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title class_\">Obj</span>.<span class=\"property\">val</span></span><br><span class=\"line\"><span class=\"title class_\">Obj</span>.<span class=\"property\">val</span> = <span class=\"string\">&#x27;123&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>上面是创建一个对象Obj，然后读取和赋值，下面是输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据已读取</span><br><span class=\"line\">数据已修改</span><br><span class=\"line\">[<span class=\"title class_\">Done</span>] exited <span class=\"keyword\">with</span> code=<span class=\"number\">0</span> <span class=\"keyword\">in</span> <span class=\"number\">0.118</span> seconds</span><br></pre></td></tr></table></figure>\n<p>上面是Object.defineProperty方法对数据进行观测拦截，每当该属性进行读或写操作的时候就会触发<code>get()</code>和<code>set()</code>,这样的方法在原来html页面进行简单的双向绑定，大型项目会很复杂，Vue框架的双向绑定引入观测模式，封装在index.js中，就是Vue的双向绑定。</p>\n```javascript\nObserver类会通过递归的方式把一个对象的所有属性都转化成可观测对象\nexport class Observer {\n  constructor (value) {\n    this.value = value\n    // 给value新增一个__ob__属性，值为该value的Observer实例\n    // 相当于为value打上标记，表示它已经被转化成响应式了，避免重复操作\n    def(value,'__ob__',this)\n    if (Array.isArray(value)) {\n      // 当value为数组时的逻辑\n      // ...\n    } else {\n      this.walk(value)\n    }\n  }\n   walk (obj: Object) {\n    const keys = Object.keys(obj)\n    for (let i = 0; i < keys.length; i++) {\n      defineReactive(obj, keys[i])\n    }\n  }\n}\n* 使一个对象转化成可观测对象\n * @param { Object } obj 对象\n * @param { String } key 对象的key\n * @param { Any } val 对象的某个key的值\nfunction defineReactive (obj,key,val) {\n  // 如果只传了obj和key，那么val = obj[key]\n  if (arguments.length === 2) {\n    val = obj[key]\n  }\n  if(typeof val === 'object'){\n      new Observer(val)\n  }\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get(){\n      console.log(`${key}属性被读取了`);\n      return val;\n    },\n    set(newVal){\n      if(val === newVal){\n          return\n      }\n      console.log(`${key}属性被修改了`);\n      val = newVal;\n    }\n  })\n}\n````\n<p>上面是数据可观测的过程，上面的代码中我们定义了<code>observer</code>类，它用来将一个正常的<code>object</code>转换成可观测的<code>object</code>。\n并且给value新增一个<code>__ob__</code>属性，值为该value的<code>Observer</code>实例。这个操作相当于为<code>value</code>打上标记，表示它已经被转化成响应式了，避免重复操作\n</p>\n<p>\n然后判断数据的类型，只有<code>object</code>类型的数据才会调用walk将每一个属性转换成<code>getter/setter</code>的形式来侦测变化。 最后，在<code>defineReactive</code>中当传入的属性值还是一个object时使用<code>new observer（val）</code>来递归子属性，这样我们就可以把obj中的所有属性（包括子属性）都转换成<code>getter/seter</code>的形式来侦测变化。 也就是说，只要我们将一个<code>object</code>传到<code>observer</code>中，那么这个<code>object</code>就会变成可观测的、响应式的<code>object</code>。\n</p>\n<h4>2.依赖收集</h4>\n<p>之后还有依赖收集，我们在上面是实现了数据的可观测性，数据变换之后，还得通知对应的视图层变换，在整个视图层之中知道需要通知的部分，就是“依赖收集”。如果数据变了，就把数据的依赖数组通知变换。</p>\n<p>总结一句话就是:<code>getter()</code>收集依赖 , <code>setter()</code>通知依赖更新</p>\n","prev":{"title":"webpack打包","link":"2020/04/19/webpack打包"},"next":{"title":"leetcode每日一题(旋转矩阵)","link":"2020/04/07/leetcode每日一题-旋转矩阵"},"plink":"https://edsion11.github.io/2020/04/08/Vue双向绑定/","toc":[{"id":"","title":"1.使Object数据变得可侦测 ","index":"1"},{"id":"","title":"2.依赖收集","index":"2"}],"copyright":{"author":"Edsion Gu","link":"<a href=\"https://edsion11.github.io/2020/04/08/Vue双向绑定/\" title=\"Vue双向绑定\">https://edsion11.github.io/2020/04/08/Vue双向绑定/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}