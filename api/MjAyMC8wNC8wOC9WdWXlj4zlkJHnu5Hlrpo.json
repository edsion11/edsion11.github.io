{"title":"Vue双向绑定","date":"2020-04-08T14:27:04.000Z","date_formatted":{"ll":"Apr 8, 2020","L":"04/08/2020","MM-DD":"04-08"},"link":"2020/04/08/Vue双向绑定","tags":["Vue"],"updated":"2022-01-22T09:45:40.642Z","content":"<p>Vue的双向绑定是v-model指令</p>\n<p>具体的实现原理是用了js中的<code>Object.defineProperty</code>方法来修改目标对象的属性</p>\n<img src=\"https://vue-js.com/learn-vue/assets/img/3.0b99330d.jpg\">\n先看看Vue中源码中的解释:\n<a href=\"https://github.com/vuejs/vue/blob/dev/src/core/observer/index.js\" target=\"_blank\" rel=\"noopener\">源码地址</a>\n<h4>1.使Object数据变得可侦测 </h4>\n<p>数据的每次读和写能够被我们看的见，即我们能够知道数据什么时候被读取了或数据什么时候被改写了，我们将其称为数据变的‘可观测’。</p>\n<p>要将数据变的‘可观测’，我们就要借助前言中提到的<code>Object.defineProperty</code>方法了，在本文中，我们就使用这个方法使数据变得“可观测”。</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Obj = &#123;</span><br><span class=\"line\">  val: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Obj, <span class=\"string\">'val'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'数据已读取'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'数据已修改'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Obj.val</span><br><span class=\"line\">Obj.val = <span class=\"string\">'123'</span></span><br></pre></td></tr></table></figure><p>上面是创建一个对象Obj，然后读取和赋值，下面是输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据已读取</span><br><span class=\"line\">数据已修改</span><br><span class=\"line\">[Done] exited <span class=\"keyword\">with</span> code=<span class=\"number\">0</span> <span class=\"keyword\">in</span> <span class=\"number\">0.118</span> seconds</span><br></pre></td></tr></table></figure>\n<p>上面是Object.defineProperty方法对数据进行观测拦截，每当该属性进行读或写操作的时候就会触发<code>get()</code>和<code>set()</code>,这样的方法在原来html页面进行简单的双向绑定，大型项目会很复杂，Vue框架的双向绑定引入观测模式，封装在index.js中，就是Vue的双向绑定。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observer类会通过递归的方式把一个对象的所有属性都转化成可观测对象</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">    <span class=\"comment\">// 给value新增一个__ob__属性，值为该value的Observer实例</span></span><br><span class=\"line\">    <span class=\"comment\">// 相当于为value打上标记，表示它已经被转化成响应式了，避免重复操作</span></span><br><span class=\"line\">    def(value,<span class=\"string\">'__ob__'</span>,<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 当value为数组时的逻辑</span></span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.walk(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   walk (obj: <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(obj)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">      defineReactive(obj, keys[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">* 使一个对象转化成可观测对象</span><br><span class=\"line\"> * @param &#123; <span class=\"built_in\">Object</span> &#125; obj 对象</span><br><span class=\"line\"> * @param &#123; <span class=\"built_in\">String</span> &#125; key 对象的key</span><br><span class=\"line\"> * @param &#123; Any &#125; val 对象的某个key的值</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span> (<span class=\"params\">obj,key,val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果只传了obj和key，那么val = obj[key]</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    val = obj[key]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> val === <span class=\"string\">'object'</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">new</span> Observer(val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>属性被读取了`</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(newVal)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(val === newVal)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>属性被修改了`</span>);</span><br><span class=\"line\">      val = newVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure><p>上面是数据可观测的过程，上面的代码中我们定义了<code>observer</code>类，它用来将一个正常的<code>object</code>转换成可观测的<code>object</code>。\n并且给value新增一个<code>__ob__</code>属性，值为该value的<code>Observer</code>实例。这个操作相当于为<code>value</code>打上标记，表示它已经被转化成响应式了，避免重复操作\n</p>\n<p>\n然后判断数据的类型，只有<code>object</code>类型的数据才会调用walk将每一个属性转换成<code>getter/setter</code>的形式来侦测变化。 最后，在<code>defineReactive</code>中当传入的属性值还是一个object时使用<code>new observer（val）</code>来递归子属性，这样我们就可以把obj中的所有属性（包括子属性）都转换成<code>getter/seter</code>的形式来侦测变化。 也就是说，只要我们将一个<code>object</code>传到<code>observer</code>中，那么这个<code>object</code>就会变成可观测的、响应式的<code>object</code>。\n</p>\n<h4>2.依赖收集</h4>\n<p>之后还有依赖收集，我们在上面是实现了数据的可观测性，数据变换之后，还得通知对应的视图层变换，在整个视图层之中知道需要通知的部分，就是“依赖收集”。如果数据变了，就把数据的依赖数组通知变换。</p>\n<p>总结一句话就是:<code>getter()</code>收集依赖 , <code>setter()</code>通知依赖更新</p>","prev":{"title":"webpack打包","link":"2020/04/19/webpack打包"},"next":{"title":"leetcode每日一题(旋转矩阵)","link":"2020/04/07/leetcode每日一题-旋转矩阵"},"plink":"https://edsion11.github.io/2020/04/08/Vue双向绑定/","toc":[{"id":"","title":"1.使Object数据变得可侦测 ","index":"1"},{"id":"","title":"2.依赖收集","index":"2"}],"copyright":{"author":"Edsion Gu","link":"<a href=\"https://edsion11.github.io/2020/04/08/Vue双向绑定/\" title=\"Vue双向绑定\">https://edsion11.github.io/2020/04/08/Vue双向绑定/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}