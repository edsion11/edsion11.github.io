{"title":"箭头函数","date":"2020-04-21T11:55:51.000Z","date_formatted":{"ll":"Apr 21, 2020","L":"04/21/2020","MM-DD":"04-21"},"link":"2020/04/21/箭头函数","tags":["javascript函数","箭头函数"],"updated":"2022-01-22T09:45:40.644Z","content":"<h3 id=\"箭头函数\">箭头函数<a href=\"#箭头函数\" title=\"箭头函数\"></a></h3><p>箭头函数表达式的语法比函数表达式更简洁，并且没有自己的<code>this</code>，<code>arguments</code>，<code>super</code>或<code>new.target</code>。箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。</p>\n<h4 id=\"例\">例<a href=\"#例\" title=\"例\"></a></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> materials = [<span class=\"string\">'Hydrogen'</span>, <span class=\"string\">'Helium'</span>, <span class=\"string\">'Lithium'</span>, <span class=\"string\">'Beryllium'</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(materials.map(<span class=\"function\">(<span class=\"params\">material</span>) =&gt;</span> material.length))</span><br><span class=\"line\"><span class=\"comment\">// expected output: Array [8, 6, 7, 9]</span></span><br></pre></td></tr></table></figure><h4 id=\"基础语法\">基础语法<a href=\"#基础语法\" title=\"基础语法\"></a></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(param1, param2, …, paramN) =&gt; &#123; statements &#125;</span><br><span class=\"line\">(param1, param2, …, paramN) =&gt; expression</span><br><span class=\"line\"><span class=\"comment\">//相当于：(param1, param2, …, paramN) =&gt;&#123; return expression; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当只有一个参数时，圆括号是可选的：</span></span><br><span class=\"line\">(singleParam) =&gt; &#123; statements &#125;</span><br><span class=\"line\">singleParam =&gt; &#123; statements &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 没有参数的函数应该写成一对圆括号。</span></span><br><span class=\"line\">() =&gt; &#123; statements &#125;</span><br></pre></td></tr></table></figure><h4 id=\"高级语法\">高级语法<a href=\"#高级语法\" title=\"高级语法\"></a></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加括号的函数体返回对象字面量表达式：</span></span><br><span class=\"line\">params =&gt; (&#123;<span class=\"attr\">foo</span>: bar&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//支持剩余参数和默认参数</span></span><br><span class=\"line\">(param1, param2, ...rest) =&gt; &#123; statements &#125;</span><br><span class=\"line\">(param1 = defaultValue1, param2, …, paramN = defaultValueN) =&gt; &#123;</span><br><span class=\"line\">statements &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//同样支持参数列表解构</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> f = <span class=\"function\">(<span class=\"params\">[a, b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>], &#123;x: c&#125; = &#123;x: a + b&#125;</span>) =&gt;</span> a + b + c;</span><br><span class=\"line\">f();  <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure><h5 id=\"引入箭头函数主要有两个方面的作用更简短的函数而且不绑定-this\">引入箭头函数主要有两个方面的作用:更简短的函数而且不绑定 this<a href=\"#引入箭头函数主要有两个方面的作用更简短的函数而且不绑定-this\" title=\"引入箭头函数主要有两个方面的作用:更简短的函数而且不绑定 this\"></a></h5><p>箭头函数不会创建自己的<code>this</code>,它只会从自己的作用域链的上一层继承<code>this</code>。因此，在下面的代码中，传递给<code>setInterval</code>的函数内的 this 与封闭函数中的<code>this</code>值相同：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age++ <span class=\"comment\">// |this| 正确地指向 p 实例</span></span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person()</span><br></pre></td></tr></table></figure><h4 id=\"通过call和apply调用\">通过<code>call</code>和<code>apply</code>调用<a href=\"#通过call和apply调用\" title=\"通过call和apply调用\"></a></h4><p>由于 箭头函数没有自己的 this 指针，通过 call() 或 apply() 方法调用一个函数时，只能传递参数（不能绑定 this），他们的第一个参数会被忽略。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> adder = &#123;</span><br><span class=\"line\">  base : <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  add : function(a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> f = v =&gt; v + <span class=\"keyword\">this</span>.base;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(a);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  addThruCall: function(a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> f = v =&gt; v + <span class=\"keyword\">this</span>.base;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = &#123;</span><br><span class=\"line\">      base : <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f.call(b, a);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(adder.add(<span class=\"number\">1</span>));         <span class=\"comment\">// 输出 2</span></span><br><span class=\"line\">console.log(adder.addThruCall(<span class=\"number\">1</span>)); <span class=\"comment\">// 仍然输出 2</span></span><br></pre></td></tr></table></figure><h5 id=\"使用箭头函数作为方法\">使用箭头函数作为方法<a href=\"#使用箭头函数作为方法\" title=\"使用箭头函数作为方法\"></a></h5><p>箭头函数作为方法时，由于没有定义<code>this</code>绑定，方法里指向里上一个作用链的作用域。下面是例子中指向的是全局作用域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用箭头函数作为方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">1</span>,</span><br><span class=\"line\">  b: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  c: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//obj.b() //undefined &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//上面是在node环境下运行的，在浏览器环境下运行会输出：undefined,window</span></span><br><span class=\"line\"><span class=\"comment\">//obj.c() //1 &#123;a:1.b:[Function:b],c:[Function:c]&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'b'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a, <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.a, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a++</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//obj.b //undefined 'undefined' &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//箭头函数不能用作构造器，和new一起用会报错</span></span><br><span class=\"line\"><span class=\"comment\">/*(var Foo = () =&gt; &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">var f = new Foo()*/</span></span><br><span class=\"line\"><span class=\"comment\">//箭头函数也没有prototype属性，同样报错</span></span><br><span class=\"line\"><span class=\"comment\">//箭头函数不能用作函数生成器。</span></span><br></pre></td></tr></table></figure><h6 id=\"还有几点注意：\">还有几点注意：<a href=\"#还有几点注意：\" title=\"还有几点注意：\"></a></h6><ul><li>箭头函数返回子面量对象时要加括号（这是因为花括号（{} ）里面的代码被解析为一系列语句（即 foo 被认为是一个标签，而非对象字面量的组成部分）。）</li>\n<li>箭头函数的作用域注意，是局部作用域</li>\n</ul><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 常规写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> greeting = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'Good'</span> + (now.getHours() &gt; <span class=\"number\">17</span> ? <span class=\"string\">' evening.'</span> : <span class=\"string\">' day.'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">greeting() <span class=\"comment\">//\"Good day.\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(now) <span class=\"comment\">// ReferenceError: now is not defined 标准的let作用域</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数括号内定义的变量是局部变量（默认参数）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> greeting = <span class=\"function\">(<span class=\"params\">now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(</span>)) =&gt;</span></span><br><span class=\"line\">  <span class=\"string\">'Good'</span> + (now.getHours() &gt; <span class=\"number\">17</span> ? <span class=\"string\">' evening.'</span> : <span class=\"string\">' day.'</span>)</span><br><span class=\"line\">greeting() <span class=\"comment\">//\"Good day.\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(now) <span class=\"comment\">// ReferenceError: now is not defined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对比：函数体内&#123;&#125;不使用var定义的变量是全局变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> greeting = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'Good'</span> + (now.getHours() &gt; <span class=\"number\">17</span> ? <span class=\"string\">' evening.'</span> : <span class=\"string\">' day.'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">greeting() <span class=\"comment\">//\"Good day.\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(now) <span class=\"comment\">// Fri Dec 22 2017 10:01:00 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对比：函数体内&#123;&#125; 用var定义的变量是局部变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> greeting = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'Good'</span> + (now.getHours() &gt; <span class=\"number\">17</span> ? <span class=\"string\">' evening.'</span> : <span class=\"string\">' day.'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">greeting() <span class=\"comment\">//\"Good day.\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(now) <span class=\"comment\">// ReferenceError: now is not defined</span></span><br></pre></td></tr></table></figure><p>上面是 MDN 的例子。</p>\n<ul><li>同样的箭头函数还可以使用闭包和递归</li>\n</ul><h5 id=\"2020425-补充\">2020/4/25 补充<a href=\"#2020425-补充\" title=\"2020/4/25 补充\"></a></h5><h5 id=\"箭头函数与匿名函数的区别\">箭头函数与匿名函数的区别<a href=\"#箭头函数与匿名函数的区别\" title=\"箭头函数与匿名函数的区别\"></a></h5><ul><li><p>this 指向区别</p>\n<ul><li>箭头函数根据所在的环境（我在哪个环境中，this 就指向谁），Arrow functions bind the parent context。按照词法作用域绑定 this</li>\n<li>匿名函数中 this 指向 window</li>\n</ul></li>\n</ul><h6 id=\"使用箭头函数注意几点\">使用箭头函数注意几点<a href=\"#使用箭头函数注意几点\" title=\"使用箭头函数注意几点\"></a></h6><ul><li><p>1、函数体内的 this 对象就是定义时所在的对象，而不是使用时所在对象；</p>\n</li>\n<li><p>2、不可以当作构造函数使用，也就是不能用 new 命令实例化一个对象，否则会抛出一个错误；</p>\n</li>\n<li><p>3、不可以使用 arguments 对象，该对象在函数体内不存在，如果要用的话，可以用 rest 参数代替；</p>\n</li>\n<li><p>4、不可以使用 yield 命令，箭头函数不能用作 Generator 函数；</p>\n</li>\n</ul>","prev":{"title":"动态规划","link":"2020/04/24/动态规划"},"next":{"title":"leetcode-21-合并两个有序链表","link":"2020/04/20/leetcode-21-合并两个有序链表"},"plink":"https://edsion11.github.io/2020/04/21/箭头函数/","toc":[{"id":"箭头函数","title":"箭头函数","index":"1","children":[{"id":"例","title":"例","index":"1.1"},{"id":"基础语法","title":"基础语法","index":"1.2"},{"id":"高级语法","title":"高级语法","index":"1.3"},{"id":"通过call和apply调用","title":"通过call和apply调用","index":"1.4"}]}],"copyright":{"author":"Edsion Gu","link":"<a href=\"https://edsion11.github.io/2020/04/21/箭头函数/\" title=\"箭头函数\">https://edsion11.github.io/2020/04/21/箭头函数/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}