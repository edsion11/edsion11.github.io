{"title":"使用Angular Universal做ssr渲染","date":"2021-12-12T18:34:32.000Z","date_formatted":{"ll":"Dec 12, 2021","L":"12/12/2021","MM-DD":"12-12"},"link":"2021/12/12/使用angular-universal做ssr渲染","tags":["angular","ssr"],"categories":["前端"],"updated":"2023-10-16T08:07:08.477Z","content":"<p>最近在公司的项目中用到了react做ssr渲染，于是想在angular中也试试，angular在很久之前就出了做ssr渲染的库，名字是<code>@nguniversal/express-engine</code>,使用<code>ng add</code>可以稳定的将自己的项目转化为<code>ssr</code>渲染模式</p>\n<h3 id=\"如何构建服务端渲染项目\">如何构建服务端渲染项目<a title=\"#如何构建服务端渲染项目\" href=\"#如何构建服务端渲染项目\"></a></h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add @nguniversal/express-engine</span><br></pre></td></tr></table></figure>\n<p>这样我们的项目中会多出几个文件，分别是</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/</span><br><span class=\"line\">  main.server.ts             * bootstrapper <span class=\"keyword\">for</span> server app</span><br><span class=\"line\">  app/ ...                   application code</span><br><span class=\"line\">    app.server.module.ts     * server-side application module</span><br><span class=\"line\">server.ts                    * express web server</span><br><span class=\"line\">tsconfig.server.json         TypeScript server application configuration</span><br></pre></td></tr></table></figure>\n<p>首先是<code>main.server.ts</code>文件如下：这个文件主要是服务端渲染的初始化文件，包括设置环境<code>enableProdMode</code>以及<code>export AppServerModule</code>模块在<code>server</code>中<code>bootstrap</code></p>\n<ul>\n<li><code>main.server.ts</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***************************************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\"> * Initialize the server environment - for example, adding DOM built-in types to the global scope.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">NOTE:</span></span></span><br><span class=\"line\"><span class=\"comment\"> * This import must come before any imports (direct or transitive) that rely on DOM built-ins being</span></span><br><span class=\"line\"><span class=\"comment\"> * available, such as `<span class=\"doctag\">@angular</span>/elements`.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;@angular/platform-server/init&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; enableProdMode &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; environment &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./environments/environment&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (environment.<span class=\"property\">production</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">enableProdMode</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; <span class=\"title class_\">AppServerModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app/app.server.module&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; renderModule, renderModuleFactory &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-server&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>其次一个比较重要的文件是<code>server.ts</code>文件：这里是<code>express</code>启动的地方，以及各种服务端的中间处理逻辑都写在这里。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;zone.js/dist/zone-node&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ngExpressEngine &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nguniversal/express-engine&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> express <span class=\"keyword\">from</span> <span class=\"string\">&#x27;express&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; join &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;path&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createProxyMiddleware &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;http-proxy-middleware&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppServerModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./src/main.server&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">APP_BASE_HREF</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; existsSync &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The Express app is exported so that it can be used by serverless Functions.</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">app</span>(<span class=\"params\"></span>): express.<span class=\"property\">Express</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> server = <span class=\"title function_\">express</span>()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> distFolder = <span class=\"title function_\">join</span>(process.<span class=\"title function_\">cwd</span>(), <span class=\"string\">&#x27;dist/mean-app/browser&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> indexHtml = <span class=\"title function_\">existsSync</span>(<span class=\"title function_\">join</span>(distFolder, <span class=\"string\">&#x27;index.original.html&#x27;</span>))</span><br><span class=\"line\">    ? <span class=\"string\">&#x27;index.original.html&#x27;</span></span><br><span class=\"line\">    : <span class=\"string\">&#x27;index&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Our Universal express-engine (found @ https://github.com/angular/universal/tree/master/modules/express-engine)</span></span><br><span class=\"line\">  server.<span class=\"title function_\">engine</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;html&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">ngExpressEngine</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">bootstrap</span>: <span class=\"title class_\">AppServerModule</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  server.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;view engine&#x27;</span>, <span class=\"string\">&#x27;html&#x27;</span>)</span><br><span class=\"line\">  server.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;views&#x27;</span>, distFolder)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Example Express Rest API endpoints</span></span><br><span class=\"line\">  <span class=\"comment\">// server.get(&#x27;/api/**&#x27;, (req, res) =&gt; &#123; &#125;);</span></span><br><span class=\"line\">  <span class=\"comment\">// Serve static files from /browser</span></span><br><span class=\"line\">  server.<span class=\"title function_\">get</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;*.*&#x27;</span>,</span><br><span class=\"line\">    express.<span class=\"title function_\">static</span>(distFolder, &#123;</span><br><span class=\"line\">      <span class=\"attr\">maxAge</span>: <span class=\"string\">&#x27;1y&#x27;</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">  server.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;/api&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">createProxyMiddleware</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">target</span>: <span class=\"string\">&#x27;https://data.mongodb-api.com/...&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">pathRewrite</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;^/api&#x27;</span>: <span class=\"string\">&#x27;/&#x27;</span>, <span class=\"comment\">// rewrite path</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// All regular routes use the Universal engine</span></span><br><span class=\"line\">  server.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">render</span>(indexHtml, &#123;</span><br><span class=\"line\">      req,</span><br><span class=\"line\">      <span class=\"attr\">providers</span>: [&#123; <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_BASE_HREF</span>, <span class=\"attr\">useValue</span>: req.<span class=\"property\">baseUrl</span> &#125;],</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> server</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> port = process.<span class=\"property\">env</span>.<span class=\"property\">PORT</span> || <span class=\"number\">4000</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Start up the Node server</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> server = <span class=\"title function_\">app</span>()</span><br><span class=\"line\">  server.<span class=\"title function_\">listen</span>(port, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Node Express server listening on http://localhost:<span class=\"subst\">$&#123;port&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Webpack will replace &#x27;require&#x27; with &#x27;__webpack_require__&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &#x27;__non_webpack_require__&#x27; is a proxy to Node &#x27;require&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// The below code is to ensure that the server is run only when not requiring the bundle.</span></span><br><span class=\"line\">declare <span class=\"keyword\">const</span> <span class=\"attr\">__non_webpack_require__</span>: <span class=\"title class_\">NodeRequire</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mainModule = __non_webpack_require__.<span class=\"property\">main</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleFilename = (mainModule &amp;&amp; mainModule.<span class=\"property\">filename</span>) || <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (moduleFilename === __filename || moduleFilename.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;iisnode&#x27;</span>)) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">run</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./src/main.server&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>这里主要的逻辑有</p>\n<ul>\n<li>1.服务端<code>express</code>引擎处理html</li>\n<li>2.设置静态文件的加载</li>\n<li>3.设置路由</li>\n<li>4.对<code>response</code>和<code>request</code>做处理(middleware)</li>\n</ul>\n<p>最后是<code>app.server.module.ts</code>是整个angular应用的顶层模块注入管理，在<code>@NgModule</code>中引入了两个新的模块处理服务端渲染的状态管理和模块注入。</p>\n<h4 id=\"坑点1\">坑点1<a title=\"#坑点1\" href=\"#坑点1\"></a></h4>\n<p>正常来说，通过Angular的<code>ng add @nguniversal/express-engine</code>这行命令就可以自动帮助我们构建服务端渲染程序。但是我遇到一个问题是之前<code>CSR</code>渲染时<code>router</code>定义的方法是通过<code>routerModule</code>定义注入进<code>AppModule</code>的方式：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">RouterModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [...];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes, &#123; <span class=\"attr\">relativeLinkResolution</span>: <span class=\"string\">&#x27;legacy&#x27;</span> &#125;)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutingModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的方式在服务端渲染时并未生效，于是查看了一下文档发现最新文档已经不用这样写了，直接定义<code>routes</code>，然后在<code>AppModule</code>中<code>RouterModule.forRoot(routes,...）</code>注入就可以了！</p>\n<h4 id=\"坑点2\">坑点2<a title=\"#坑点2\" href=\"#坑点2\"></a></h4>\n<p>由于我的个人项目是使用<code>tailwindcss</code>管理样式，这样在服务端渲染时，加载的时间会特别长，看了一下<code>tailwindcss</code>在本地开发是全量打包进<code>style</code>里的，于是每次加载的时候都会加载这个包，这个包体积很大，tailwind官方有<code>shaking</code>的配置，但建议是在生产环境下再进行<code>shaking</code>，原理也就是通过正则对<code>html</code>分析然后剔除不用的类。于是乎被迫在本地开发的情况开启了：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">prefix</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">purge</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">enabled</span>:  <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">content</span>: [</span><br><span class=\"line\">        <span class=\"string\">&#x27;./src/**/*.&#123;html,ts&#125;&#x27;</span>,</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"坑点3：重复渲染/请求\">坑点3：重复渲染/请求<a title=\"#坑点3：重复渲染/请求\" href=\"#坑点3：重复渲染/请求\"></a></h4>\n<p>基于Angular universal的处理会在服务端渲染以及<code>hydrate</code>后在浏览器再执行一遍<code>render</code>，这个目前看起来不是很理解，官方目前也知道这个问题，于是有处理方案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">TransferHttpCacheModule</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nguniversal/common&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/angular/universal/blob/master/docs/transfer-http.md\" target=\"_blank\">TransferHttpCacheModule</a></p>\n<h5 id=\"一个issue\">一个issue<a title=\"#一个issue\" href=\"#一个issue\"></a></h5>\n<p><a href=\"https://github.com/angular/angular/issues/23427\" target=\"_blank\">Angular - TransferState - page is loading twice (flickering) issue</a></p>\n<p>主要是<code>import</code>进<code>TransferHttpCacheModule</code>注入至全局Module，这样可以缓存内部<code>httpClientModule</code>发起的<code>http</code>请求，防止重复请求闪屏的出现。</p>\n<p>暂时就这些问题，先记录一下。</p>\n","prev":{"title":"Ant Design Select组件弹出选项跟随外部容器scroll问题记录","link":"2023/10/13/Ant-Design-Select组件弹出选项跟随外部容器scroll问题记录"},"next":{"title":"有关Angular新一代编译引擎Ivy的介绍","link":"2021/07/22/有关Angular新一代编译引擎Ivy的介绍"},"plink":"https://edsion11.github.io/2021/12/12/使用angular-universal做ssr渲染/","toc":[{"id":"如何构建服务端渲染项目","title":"如何构建服务端渲染项目","index":"1","children":[{"id":"坑点1","title":"坑点1","index":"1.1"},{"id":"坑点2","title":"坑点2","index":"1.2"},{"id":"坑点3：重复渲染/请求","title":"坑点3：重复渲染&#x2F;请求","index":"1.3"}]}],"copyright":{"author":"Edsion Gu","link":"<a href=\"https://edsion11.github.io/2021/12/12/使用angular-universal做ssr渲染/\" title=\"使用Angular Universal做ssr渲染\">https://edsion11.github.io/2021/12/12/使用angular-universal做ssr渲染/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}