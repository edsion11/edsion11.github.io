{"title":"Rust学习小记录","date":"2020-10-03T15:14:25.000Z","date_formatted":{"ll":"Oct 3, 2020","L":"10/03/2020","MM-DD":"10-03"},"link":"2020/10/03/Rust学习小记录","categories":["Rust"],"updated":"2022-01-22T09:45:40.641Z","content":"<h4 id=\"rust-入坑\">Rust 入坑<a href=\"#rust-入坑\" title=\"Rust 入坑\"></a></h4><p>首先介绍一下 Rust:A language for the next 40 years 在油管上某视频被称为下一个 40 年所用的语言。那么 Rust 的特点有哪些呢，官网对其的介绍有三个特点：</p>\n<pre><code>- 高性能\n- 可靠性\n- 生产力</code></pre><p>rust 是由 Mozila 公司推出是为构建高性能应用的语言，直接竞争对手有 C，C++语言。Rust 一些比较吸引人的是，具有很高的性能，类似于 npm 的包管理器（前端友好）,稳定的 async await 异步模型，前端的朋友应该很熟悉了。还有诸如泛型，trait，错误处理，生命周期，所有权提供内存安全，以及并发时的数据安全，智能指针+无 GC 更灵活。但 Rust 目前还处于成长状态，有友好的社区支持，但是整体生态不是很完善，可用的包较少，还需要较长时间的实践与发展。</p>\n<h4 id=\"webassembly\">WebAssembly<a href=\"#webassembly\" title=\"WebAssembly\"></a></h4><p>WebAssembly 是由主流浏览器厂商组成的 W3C 社区团体制定的新的规范，作为可用于前端开发的第四种“语言”。WebAssembly 有一套完整的语义，目标是将其他语言编译成<code>wasm</code> 或<code>wat</code>二进制文件，目标是充分发挥硬件能力以达到原生执行效率。<br>作为一种编程语言，WebAssembly 由两种表示相同结构的格式组成，尽管使用的方式不同：</p>\n<ul><li>wat 文件是 WebAssembly 的一种体现，用的是一种 S-expressions,用的是一种类似于 Clojure 的语言。</li>\n<li>而.wasm 二进制格式是低级别和用于通过 WASM 虚拟机直接消耗。从概念上讲，它类似于 ELF 和 Mach-O。</li>\n</ul><h4 id=\"rust-构建-wasm-之准备\">rust 构建 wasm 之准备<a href=\"#rust-构建-wasm-之准备\" title=\"rust 构建 wasm 之准备\"></a></h4><p>首先是工具链<br>需要 rust 的构建工具 <code>rustup</code>，<code>rustc</code>， <code>cargo</code>.<br><code>rustup</code>是用来安装 <code>rust</code> 的工具，<code>rustc</code>是用来编译<code>rust</code>代码的命令行工具，<code>cargo</code>则是 rust 官方的包管理器。接下来安装<code>wasm-pack</code>，用来构建，测试，发布 rust 生成的 webAssembly。安装地址：<a href=\"https://rustwasm.github.io/wasm-pack/installer/\" target=\"_blank\">wasm-pack</a>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo install cargo-generate</span><br></pre></td></tr></table></figure><p><code>cargo-generate</code>用来启动和运行 rust 项目<br>当然将<code>wasm</code>运行在 web 上，还需要<code>npm</code>包管理器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install npm@latest -g</span><br></pre></td></tr></table></figure><h4 id=\"正式开始\">正式开始<a href=\"#正式开始\" title=\"正式开始\"></a></h4><p>首先用刚才安装的<code>cargo-generate</code>克隆远程仓库的项目模板。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo generate --git https:<span class=\"comment\">//github.com/rustwasm/wasm-pack-template</span></span><br></pre></td></tr></table></figure><p>运行之后会提示输入项目名称,比如<code>hello</code>。<br>克隆完成后，进入项目</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd wasm-game-<span class=\"keyword\">of</span>-life</span><br></pre></td></tr></table></figure><p>项目结构如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello/</span><br><span class=\"line\">├── Cargo.toml</span><br><span class=\"line\">├── LICENSE_APACHE</span><br><span class=\"line\">├── LICENSE_MIT</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    ├── lib.rs</span><br><span class=\"line\">    └── utils.rs</span><br></pre></td></tr></table></figure><p>首先是 cargo.toml 文件，学习过 rust 的都应该了解了这个文件。这个文件类似与 npm 的<code>package.json</code>文件,里面保存了当前的项目的版本以及依赖的包。还有一个比较重要的文件是<code>src</code>下面的<code>lib.rs</code>文件,这个文件类似于一个模块，是我们即将编译为<code>wasm</code>文件的 rust 源文件,它主要用于<code>wasm-bingen</code>和<code>javascript</code>交互</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#![allow(unused_variables)]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\"><span class=\"keyword\">mod</span> utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> wasm_bindgen::prelude::*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// When the `wee_alloc` feature is enabled, use `wee_alloc` as the global</span></span><br><span class=\"line\"><span class=\"comment\">// allocator.</span></span><br><span class=\"line\"><span class=\"meta\">#[cfg(feature = <span class=\"meta-string\">\"wee_alloc\"</span>)]</span></span><br><span class=\"line\"><span class=\"meta\">#[global_allocator]</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[wasm_bindgen]</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">alert</span></span>(s: &amp;<span class=\"built_in\">str</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[wasm_bindgen]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">greet</span></span>() &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Hello, hello!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>接下来在当前目录下面运行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wasm-pack build</span><br></pre></td></tr></table></figure><p>会将我们的 rust 项目打包为 WebAssembly 文件和 js 文件，编译后的文件在<code>pkg</code>文件夹内</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg/</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── hello_bg.wasm</span><br><span class=\"line\">├── hello.d.ts</span><br><span class=\"line\">└── hello.js</span><br></pre></td></tr></table></figure><p>同时也生成了 ts 文件，更有助与工程化的构建 web 程序</p>\n<p>接下来在当前目录下克隆一个 wasm 的 web 项目模板,</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init wasm-app www</span><br></pre></td></tr></table></figure><p>可看<a href=\"https://github.com/rustwasm/create-wasm-app\" target=\"_blank\">wasm-app Github 介绍</a></p>\n<p>接下来修改目录下的文件的部分内容，让他能找到我们的 WebAssembly 文件，并运行在本地环境</p>\n<p>首先是修改<code>www</code>目录下的<code>package.json</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;                     <span class=\"comment\">// Add this three lines block!</span></span><br><span class=\"line\">    <span class=\"string\">\"wasm-game-of-life\"</span>: <span class=\"string\">\"file:../pkg\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>接下来修改<code>www/index.js</code>为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> wasm <span class=\"keyword\">from</span> <span class=\"string\">'wasm-game-of-life'</span></span><br><span class=\"line\"></span><br><span class=\"line\">wasm.greet()</span><br></pre></td></tr></table></figure><p>接下来在该目录下运行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm run start</span><br></pre></td></tr></table></figure><p>即可在本地环境看到了<code>alert</code><br>这样一个简单的 wasm 项目就运行起来了，接着我们可以在 rust 目录下写 lib.rs 来丰富我们的应用了。</p>\n<p>下一次分享利用 rust 构建一个小型服务器，用来操作 mongoDB 数据库。<br>在之后可以尝试将<code>tensorflow</code>上的个别深度学习模型，编译为 wasm 运行在浏览器中，进行尝试。</p>\n","prev":{"title":"前端项目服务端渲染（SSR）","link":"2021/02/15/前端项目服务端渲染（SSR）"},"next":{"title":"JavaScript设计模式之观察者模式","link":"2020/07/25/JavaScript设计模式之观察者模式"},"plink":"https://edsion11.github.io/2020/10/03/Rust学习小记录/","toc":[{"id":"rust-入坑","title":"Rust 入坑","index":"1"},{"id":"webassembly","title":"WebAssembly","index":"2"},{"id":"rust-构建-wasm-之准备","title":"rust 构建 wasm 之准备","index":"3"},{"id":"正式开始","title":"正式开始","index":"4"}],"copyright":{"author":"Edsion Gu","link":"<a href=\"https://edsion11.github.io/2020/10/03/Rust学习小记录/\" title=\"Rust学习小记录\">https://edsion11.github.io/2020/10/03/Rust学习小记录/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}