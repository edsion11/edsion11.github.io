{"title":"Promise从入门到放弃","date":"2020-04-28T23:34:41.000Z","date_formatted":{"ll":"Apr 28, 2020","L":"04/28/2020","MM-DD":"04-28"},"link":"2020/04/28/Promise从入门到放弃","tags":["Promise","async/await","宏队列","微队列"],"updated":"2022-01-22T09:45:40.641Z","content":"<h3 id=\"promise-从入门到放弃\">Promise 从入门到放弃<a title=\"#promise-从入门到放弃\" href=\"#promise-从入门到放弃\"></a></h3>\n<h4 id=\"javascript-异步操作执行历史\">javascript 异步操作执行历史<a title=\"#javascript-异步操作执行历史\" href=\"#javascript-异步操作执行历史\"></a></h4>\n<p>JavaScript 语言的执行环境是“单线程”， 所谓单线程，就是一次只能完成一件任务， 如果有多个任务就需要排队，一个完成了，继续下一个，这种方式在实现来说是非常简单的，但是如果一个任务耗时很长，那么后面的任务就需要排队等着，会拖延整个程序的执行。 常见的浏览器无响应（假死）就是因为某一段 JavaScript 代码长时间运行（比如死循环），导致整个页面卡死，其他任务无法执行。</p>\n<h4 id=\"javascript-异步操作的类型\">javascript 异步操作的类型<a title=\"#javascript-异步操作的类型\" href=\"#javascript-异步操作的类型\"></a></h4>\n<ul>\n<li>回调函数</li>\n<li>事件监听</li>\n<li>发布/订阅</li>\n<li>promise</li>\n<li>generator（ES6）</li>\n<li>async/await （ES7）</li>\n</ul>\n<h4 id=\"回调函数\">回调函数<a title=\"#回调函数\" href=\"#回调函数\"></a></h4>\n<ul>\n<li>同步回调<br>\n立即执行，完全执行完之后才结束，不会放入回调队列<br>\nexample : Promise(()=&gt;{}) 数组的 forEach()</li>\n<li>异步回调<br>\nsetTimeout((()=&gt;{}))</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;over&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>异步回调<br>\n进入回调队列，等待执行</p>\n</li>\n<li>\n<p>回调函数</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f1</span>(<span class=\"params\">func</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是f1&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">50000</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是f1的&#x27;</span> + i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">func</span>(<span class=\"title class_\">Zz</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;我是f2&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f3</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;我是f3&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f1</span>(f2) <span class=\"comment\">//这里f1(),f2()不会阻塞f3()的运行</span></span><br><span class=\"line\"><span class=\"title function_\">f3</span>()</span><br></pre></td></tr></table></figure>\n<p>这里主要利用<code>setTimeout()</code>函数来进行异步操作，f3<code>()</code>的执行不会受到<code>f1()</code>影响。主要是因为<code>setTimeout()</code>是异步函数。</p>\n<ul>\n<li>为什么要用 Promise\n<ul>\n<li>1.指定回调函数的而方式更加灵活</li>\n<li>2.支持链式调用，可解决回调地狱问题<br>\n回调地狱就是传统的回调函数嵌套所产生的问题，不利于阅读，不利于异常处理，解决方案有 Promise 链式调用以及最新的 async 和 await</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"promise\">Promise<a title=\"#promise\" href=\"#promise\"></a></h3>\n<ul>\n<li>Promise 是 ES6 中提出的新的异步编程解决方案<br>\n语法上来看：Promise 是一个构造函数<br>\n功能上来看；Promise 对象用来封装了一个异步操作并可以获取其结果</li>\n<li>Promise 状态<br>\npending 状态–&gt;初始状态<br>\nfullFilled 状态–&gt;对应 Promise 内函数执行成功–&gt;对应 resolve(params)<br>\nrejected 状态–&gt;对应 Promise 内函数执行失败或抛出异常–&gt;对应 reject(params)</li>\n<li>Promise 执行流程<br>\n<img src=\"/images/Promise.png\" alt=\"Promise执行\" loading=\"lazy\"></li>\n</ul>\n<h3 id=\"如何改变-promise-的状态\">如何改变 promise 的状态<a title=\"#如何改变-promise-的状态\" href=\"#如何改变-promise-的状态\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">resolve</span>(value)<span class=\"comment\">//---pedding-&gt;fullfilled</span></span><br><span class=\"line\"><span class=\"title function_\">reject</span>(reason)<span class=\"comment\">//---pedding-&gt;rejected</span></span><br><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"comment\">//抛出异常，rejected，reason为throw的值</span></span><br></pre></td></tr></table></figure>\n<p>定义两个 then()，都会输出</p>\n<p>promise 状态的改变和 then 回调函数的执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先指定回调函数，在改变状态</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//这里是同步执行</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"property\">log</span><span class=\"string\">`先指定回调函数，在改变状态`</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>) <span class=\"comment\">//再改变pedding状态，同时改变数据</span></span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//先指定回调函数</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;value1----&gt;&#x27;</span> + value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//先改变状态，再指定函数</span></span><br><span class=\"line\"><span class=\"comment\">//第一种，去掉异步的定时器</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"property\">log</span><span class=\"string\">`//先改变状态，再指定函数`</span></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;value2---&gt;&#x27;</span> + value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//第二种都设置定时器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"property\">log</span><span class=\"string\">`//先改变状态，再指定函数`</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  p3.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;value3---&gt;&#x27;</span> + value)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, <span class=\"number\">1200</span>)</span><br><span class=\"line\"><span class=\"comment\">/*输出：</span></span><br><span class=\"line\"><span class=\"comment\">[ &#x27;先指定回调函数，在改变状态&#x27; ]</span></span><br><span class=\"line\"><span class=\"comment\">[ &#x27;//先改变状态，再指定函数&#x27; ]</span></span><br><span class=\"line\"><span class=\"comment\">[ &#x27;//先改变状态，再指定函数&#x27; ]</span></span><br><span class=\"line\"><span class=\"comment\">value2---&gt;2</span></span><br><span class=\"line\"><span class=\"comment\">value1----&gt;1</span></span><br><span class=\"line\"><span class=\"comment\">value3---&gt;3</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"promise.all()-和-promise.race()\">Promise.all() 和 Promise.race()<a title=\"#promise.all()-和-promise.race()\" href=\"#promise.all()-和-promise.race()\"></a></h3>\n<ul>\n<li>Promise.all()<br>\nPromise.all(iterable) 方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都“完成（resolved）”或参数中不包含 promise 时回调完成（resolve）；如果参数中 promise 有一个失败（rejected），此实例回调失败（reject），失败的原因是第一个失败 promise 的结果。</li>\n<li>Promise.race()<br>\nPromise.race(iterable) 方法返回一个 promise，一旦迭代器中的某个 promise 解决或拒绝，返回的 promise 就会解决或拒绝。</li>\n</ul>\n<h3 id=\"promise-值穿透问题\">Promise 值穿透问题<a title=\"#promise-值穿透问题\" href=\"#promise-值穿透问题\"></a></h3>\n<ul>\n<li>.then 或者 .catch 的参数期望是函数，传入非函数则会发生值穿透。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;foo&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;bar&#x27;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">result</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">//foo</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"comment\">//-----------------------------</span></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>) <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>异常穿透<br>\n(1)当使用 promise 的 then 链式调用时, 可以在最后指定失败的回调,<br>\n(2)前面任何操作出了异常, 都会传到最后失败的回调中处理</li>\n</ul>\n<h3 id=\"中断-promise-链\">中断 promise 链<a title=\"#中断-promise-链\" href=\"#中断-promise-链\"></a></h3>\n<p>(1)当使用 promise 的 then 链式调用时, 在中间中断, 不再调用后面的回调函数<br>\n(2)办法: 在回调函数中返回一个 pendding 状态的 promise 对象</p>\n<h3 id=\"手写-promise-对象\">手写 Promise 对象<a title=\"#手写-promise-对象\" href=\"#手写-promise-对象\"></a></h3>\n<p>已上传到 GIthub <a href=\"https://github.com/edsion11/guzhenxu.github.io/blob/master/Study/javascript/%E5%BC%82%E6%AD%A5javascript/%E6%89%8B%E5%86%99Promise.js\" title=\"With a Title\" target=\"_blank\">手写 Promise(ES5)</a>.</p>\n<h3 id=\"async-和-await\">async 和 await<a title=\"#async-和-await\" href=\"#async-和-await\"></a></h3>\n<ul>\n<li>async 函数<br>\n函数的返回值为 Promise 对象<br>\nPromise 对象的结果由 async 函数执行的返回值决定</li>\n<li>await 函数<br>\nawait 右侧的表达式一般为 Promise 对象，但也可以是其他值<br>\n如果表达式是 Promise 对象，await 返回 Promise 成功的值<br>\n如果为其他值，则直接作为 await 的返回值</li>\n<li>注意<br>\nawait 必须写在 async 函数中，但 async 函数中可以没有 await<br>\nawait 的 Promise 对象失败，会抛出异常，用 try…catch 捕获异常 🍎</li>\n</ul>\n<h3 id=\"宏队列-和-微队列\">宏队列 和 微队列<a title=\"#宏队列-和-微队列\" href=\"#宏队列-和-微队列\"></a></h3>\n<ul>\n<li>宏队列<br>\nDOM 事件回调 Ajax 回调 定时器回调</li>\n<li>微队列<br>\nMutation() Promise()<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">//微队列优先级高</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//立即进入宏队列</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout1&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout的Promise1&#x27;</span> + value)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;, <span class=\"number\">0</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//立即进入宏队列</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout2&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">/*</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">      每次准备取出一个宏队列的任务时，都会先执行所有的微任务</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">      */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout的Promise2&#x27;</span> + value)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;, <span class=\"number\">0</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//立即进入微队列</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise onResolved&#x27;</span> + value)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">//Promise onResolved 1.</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">//timeout</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","prev":{"title":"Promise和Observable区别","link":"2020/05/12/Promise和Observable区别"},"next":{"title":"动态规划","link":"2020/04/24/动态规划"},"plink":"https://edsion11.github.io/2020/04/28/Promise从入门到放弃/","toc":[{"id":"promise-从入门到放弃","title":"Promise 从入门到放弃","index":"1","children":[{"id":"javascript-异步操作执行历史","title":"javascript 异步操作执行历史","index":"1.1"},{"id":"javascript-异步操作的类型","title":"javascript 异步操作的类型","index":"1.2"},{"id":"回调函数","title":"回调函数","index":"1.3"}]},{"id":"promise","title":"Promise","index":"2"},{"id":"如何改变-promise-的状态","title":"如何改变 promise 的状态","index":"3"},{"id":"promise.all()-和-promise.race()","title":"Promise.all() 和 Promise.race()","index":"4"},{"id":"promise-值穿透问题","title":"Promise 值穿透问题","index":"5"},{"id":"中断-promise-链","title":"中断 promise 链","index":"6"},{"id":"手写-promise-对象","title":"手写 Promise 对象","index":"7"},{"id":"async-和-await","title":"async 和 await","index":"8"},{"id":"宏队列-和-微队列","title":"宏队列 和 微队列","index":"9"}],"copyright":{"author":"Edsion Gu","link":"<a href=\"https://edsion11.github.io/2020/04/28/Promise从入门到放弃/\" title=\"Promise从入门到放弃\">https://edsion11.github.io/2020/04/28/Promise从入门到放弃/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}