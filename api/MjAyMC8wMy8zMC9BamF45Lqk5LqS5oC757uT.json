{"title":"Ajax交互总结","date":"2020-03-30T14:43:18.000Z","date_formatted":{"ll":"Mar 30, 2020","L":"03/30/2020","MM-DD":"03-30"},"link":"2020/03/30/Ajax交互总结","tags":["Ajax","JSONP"],"updated":"2022-01-22T09:45:40.640Z","content":"<h4 id=\"什么是Ajax和JSON，它们的优缺点\">什么是Ajax和JSON，它们的优缺点</h4>\n<ul>\n<li>Ajax是全称是asynchronous JavaScript andXML，即异步JavaScript和xml，用于在Web页面中实现异步数据交互，实现页面局部刷新</li>\n<li>优点：可以实现异步通信效果，页面局部刷新，带来更好的用户体验</li>\n<li>JSON是一种轻量级的数据交换格式，看着像对象，本质是字符串</li>\n<li>优点：轻量级、易于人的阅读和编写，便于js解析，支持复合数据类型</li>\n</ul>\n<h4 id=\"Ajax的交互流程有哪几步？\">Ajax的交互流程有哪几步？</h4>\n<ul>\n<li>创建ajax对象</li>\n<code>xhr = new XMLHttpRequest</code>\n<li>规定请求地址</li>\n<code>xhr.open(method,url,async)</code>\n<li>等待服务器相应</li>\n<code>xhr.onload</code>\n<li>向服务器发送请求</li>\n<code>xhr.send()</code>\n</ul>\n<p>下面是一个验证用户名的ajax例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username.<span class=\"property\">onblur</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> usernameValue = username.<span class=\"property\">value</span>;</span><br><span class=\"line\"><span class=\"comment\">//将usernameValue提交给服务器，有服务器进行唯一性的校验</span></span><br><span class=\"line\"><span class=\"comment\">//1、创建对象 兼容处理</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">XMLHttpRequest</span>) &#123;</span><br><span class=\"line\">\txhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\txhr = <span class=\"keyword\">new</span> <span class=\"title class_\">ActiveXObject</span>(<span class=\"string\">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//2、准备发送</span></span><br><span class=\"line\">\txhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;get&quot;</span>,<span class=\"string\">&quot;./server/checkUsername.php?uname=&quot;</span> + usernameValue,<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//3、执行发送</span></span><br><span class=\"line\">\txhr.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//制定回调函数</span></span><br><span class=\"line\">\txhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(xhr.<span class=\"property\">status</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> result = xhr.<span class=\"property\">responseText</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> username_result = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#username_result&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(result == <span class=\"string\">&quot;ok&quot;</span>) &#123;</span><br><span class=\"line\">\tusername_result.<span class=\"property\">innerText</span> = <span class=\"string\">&quot;用户名可以使用&quot;</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tusername_result.<span class=\"property\">innerText</span> = <span class=\"string\">&quot;用户名已经被注册&quot;</span>;</span><br><span class=\"line\">\t\t &#125;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"XMLHttpRequest对象在IE和Firefox中创建方式有没有不同？\">XMLHttpRequest对象在IE和Firefox中创建方式有没有不同？</h4>\n<span>\nIE中通过new ActiveXObject()得到，Firefox中通过newXMLHttpRequest()得到.\n使用jquery封装好的ajax，会避免这些问题\n</span>\n<h4 id=\"简述ajax的优缺点\">简述ajax的优缺点</h4>\n<span>\n优点：\n　　<li>无刷新更新数据（在不刷新整个页面的情况下维持与服务器通信）\n　　<li>异步与服务器通信（使用异步的方式与服务器通信，不打断用户的操作）\n　　<li>前端和后端负载均衡（将一些后端的工作交给前端，减少服务器与宽度的负担）\n　　<li>界面和应用相分离（ajax将界面和应用分离也就是数据与呈现相分离）\n　　<li>缺点：\n　　<li>ajax不支持浏览器back按钮\n　　<li>安全问题 Aajax暴露了与服务器交互的细节\n　　<li>对搜索引擎的支持比较弱\n　　<li>破坏了Back与History后退按钮的正常行为等浏览器机制\n</span>\n<h4 id=\"get与post的区别，什么时候使用post？\">get与post的区别，什么时候使用post？</h4>\n<p>get和post在HTTP中都代表着请求数据，其中get请求相对来说更简单、快速，效率高些</p>\n<ul>\n<li>get相对post安全性低</li>\n<li>get有缓存，post没有</li>\n<li>get体积小，post可以无限大</li>\n<li>get的url参数可见，post不可见</li>\n<li>get只接受ASCII字符的参数数据类型，post没有限制</li>\n<li>get请求参数会保留历史记录，post中参数不会保留</li>\n<li>get会被浏览器主动catch，post不会，需要手动设置</li>\n<li>get在浏览器回退时无害，post会再次提交请求</li>\n</ul>\n<p>post一般用于修改服务器上的资源，对所发送的信息没有限制。比如</p>\n<ul><li>无法使用缓存文件（更新服务器上的文件或数据库）</li>\n<li>向服务器发送大量数据（POST 没有数据量限制）</li>\n<li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li>\n</ul>\n<h4 id=\"XMLHttpRequest常用方法和属性\">XMLHttpRequest常用方法和属性</h4>\n<p>open(get/post,url,是否异步)创建http请求</p>\n<p>send()发送请求给服务器</p>\n<p>setRequestHeader()设置头信息（使用post才会用到，get并不需要调用该方法）</p>\n<p>常用的属性：</p>\n<p>onreadystatechange 用于监听ajax的工作状态（readyState变化时会调用此方法）</p>\n<p>readyState 用来存放XMLHttpRequest的状态</p>\n<p>status 服务器返回的状态码</p>\n<p>responseText 服务器返回的文本内容</p>\n<h4 id=\"readyState的几个状态\">readyState的几个状态</h4>\n0：请求未初始化（此时还没有调用open）\n<p>1：服务器连接已建立，已经发送请求开始监听</p>\n<p>2：请求已接收，已经收到服务器返回的内容</p>\n<p>3：请求处理中，解析服务器响应内容</p>\n<p>4：请求已完成，且响应就绪</p>\n<h4 id=\"jquery ajax的实现\">jquery ajax的实现</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">     <span class=\"attr\">url</span>:发送请求的地址,</span><br><span class=\"line\">     <span class=\"attr\">data</span>:数据的拼接,<span class=\"comment\">//发送到服务器的数据</span></span><br><span class=\"line\">     <span class=\"attr\">type</span>:<span class=\"string\">&#x27;get&#x27;</span>,<span class=\"comment\">//请求方式，默认get请求</span></span><br><span class=\"line\">     <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span>,<span class=\"comment\">//服务器返回的数据类型</span></span><br><span class=\"line\">     <span class=\"attr\">async</span>:<span class=\"literal\">true</span>,<span class=\"comment\">//是否异步，默认true</span></span><br><span class=\"line\">     <span class=\"attr\">cache</span>:<span class=\"literal\">false</span>,<span class=\"comment\">//设置为 false 将不会从浏览器缓存中加载请求信息</span></span><br><span class=\"line\">     <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;,<span class=\"comment\">//请求成功后的回调函数</span></span><br><span class=\"line\">     <span class=\"attr\">error</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;<span class=\"comment\">//请求失败时调用此函数</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n不足之处：\n<p>（1）针对MVC的编程,不符合现在前端MVVM的浪潮</p>\n<p>（2）基于原生的XHR开发，XHR本身的架构不清晰，已经有了fetch的替代方案</p>\n<h4>同步和异步</h4>\n同步：程序运行从上而下，浏览器必须把这个任务执行完毕，才能继续执行下一个任务\n<p>异步：程序运行从上而下，浏览器任务没有执行完，但是可以继续执行下一行代码</p>\n<h4 id=\"跨域\">跨域</h4>\n跨域的概念：协议、域名、端口都相同才同域，否则都是跨域\n<p>解决跨域问题：</p>\n<p>1.使用JSONP（json+padding）把数据内填充起来</p>\n<p>2.CORS方式（跨域资源共享），在后端上配置可跨域</p>\n<p>3.服务器代理，通过服务器的文件能访问第三方资源</p>\n<h4>JSONP原理</h4>\najax请求受同源策略影响，不允许进行跨域请求，而script标签src属性中的链接却可以访问跨域的js脚本，利用这个特性，服务端不再返回JSON格式的数据，而是返回一段调用某个函数的js代码，在src中进行了调用，这样实现了跨域。\n<h4 id=\"Ajax和JSONP\">Ajax和JSONP</h4>\najax: { }\n<p>jsonp:fn( { } )</p>\n<p>ajax的数据jsonp不能用，jsonp的数据ajax是可以用的</p>\n<p>jsonp本质是通过URL的方式进行请求的，所以它是get方式请求，没有post</p>\n","prev":{"title":"MVC,MVP,MVVM了解","link":"2020/03/31/MVC-MVP-MVVM了解"},"next":{"title":"javaScript(一)","link":"2020/03/29/javaScript-一"},"plink":"https://edsion11.github.io/2020/03/30/Ajax交互总结/","toc":[{"id":"什么是Ajax和JSON，它们的优缺点","title":"什么是Ajax和JSON，它们的优缺点","index":"1"},{"id":"Ajax的交互流程有哪几步？","title":"Ajax的交互流程有哪几步？","index":"2"},{"id":"XMLHttpRequest对象在IE和Firefox中创建方式有没有不同？","title":"XMLHttpRequest对象在IE和Firefox中创建方式有没有不同？","index":"3"},{"id":"简述ajax的优缺点","title":"简述ajax的优缺点","index":"4"},{"id":"get与post的区别，什么时候使用post？","title":"get与post的区别，什么时候使用post？","index":"5"},{"id":"XMLHttpRequest常用方法和属性","title":"XMLHttpRequest常用方法和属性","index":"6"},{"id":"readyState的几个状态","title":"readyState的几个状态","index":"7"},{"id":"jquery ajax的实现","title":"jquery ajax的实现","index":"8"},{"id":"","title":"同步和异步","index":"9"},{"id":"跨域","title":"跨域","index":"10"},{"id":"","title":"JSONP原理","index":"11"},{"id":"Ajax和JSONP","title":"Ajax和JSONP","index":"12"}],"copyright":{"author":"Edsion Gu","link":"<a href=\"https://edsion11.github.io/2020/03/30/Ajax交互总结/\" title=\"Ajax交互总结\">https://edsion11.github.io/2020/03/30/Ajax交互总结/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}