{"title":"JavaScript常用字符串以及数组处理函数2","date":"2020-06-05T10:24:49.000Z","date_formatted":{"ll":"Jun 5, 2020","L":"06/05/2020","MM-DD":"06-05"},"link":"2020/06/05/JavaScript常用字符串以及数组处理函数2","tags":["字符串","数组"],"updated":"2022-01-22T09:45:40.641Z","content":"<h5 id=\"includes()\">includes()<a title=\"#includes()\" href=\"#includes()\"></a></h5>\n<p>判断数组是否包含一个值，返回true 或者 false</p>\n<h5 id=\"indexof()和lastindexof()\">indexOf()和lastIndexOf()<a title=\"#indexof()和lastindexof()\" href=\"#indexof()和lastindexof()\"></a></h5>\n<p>返回给定元素的第一个索引和最后一个索引</p>\n<h5 id=\"pop()和push()\">pop()和push()<a title=\"#pop()和push()\" href=\"#pop()和push()\"></a></h5>\n<p>pop()方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。<br>\npush() 方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。<br>\npop(),push()具有通用性，可用call()或apply()用在类数组对象上(arguments)</p>\n<h5 id=\"shift()和unshift()\">shift()和unshift()<a title=\"#shift()和unshift()\" href=\"#shift()和unshift()\"></a></h5>\n<p>shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。<br>\nunshift() 方法将一个或多个元素添加到数组的开头，并返回该数组的新长度(该方法修改原有数组)。</p>\n<h5 id=\"reduce()\">reduce()<a title=\"#reduce()\" href=\"#reduce()\"></a></h5>\n<p><code>reduce()</code> 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。<br>\nreduce()的callback接受五个参数（前两个为必选，后三个可选参数）：</p>\n<ul>\n<li>accumulator累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue。</li>\n<li>currentValue数组中正在处理的元素。</li>\n<li>index 数组中正在处理的当前元素的索引。 如果提供了initialValue，则起始索引号为0，否则从索引1起始。</li>\n<li>array 调用reduce()的数组</li>\n<li>initialValue 作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。<br>\n回调函数第一次执行时，accumulator 和currentValue的取值有两种情况：如果调用reduce()时提供了initialValue，accumulator取值为initialValue，currentValue取数组中的第一个值；如果没有提供 initialValue，那么accumulator取数组中的第一个值，currentValue取数组中的第二个值。</li>\n</ul>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> names = [<span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Tiff&#x27;</span>, <span class=\"string\">&#x27;Bruce&#x27;</span>, <span class=\"string\">&#x27;Alice&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> countedNames = names.<span class=\"title function_\">reduce</span>(<span class=\"keyword\">function</span> (<span class=\"params\">allNames, name</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (name <span class=\"keyword\">in</span> allNames) &#123;</span><br><span class=\"line\">         allNames[name]++;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         allNames[name] = <span class=\"number\">1</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> allNames;</span><br><span class=\"line\"> &#125;, &#123;&#125;);</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(names)</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(countedNames)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//数组去重</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr.<span class=\"title function_\">sort</span>().<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">init, current</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(init.<span class=\"property\">length</span> === <span class=\"number\">0</span> || init[init.<span class=\"property\">length</span>-<span class=\"number\">1</span>] !== current) &#123;</span><br><span class=\"line\">        init.<span class=\"title function_\">push</span>(current);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> init;</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">//[1,2,3,4,5</span></span><br><span class=\"line\">  <span class=\"comment\">//--还有按顺序运行Promise</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"slice()\">slice()<a title=\"#slice()\" href=\"#slice()\"></a></h5>\n<p>slice() 方法返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括end）。原始数组不会被改变。<br>\nslice可以一般化用在类数组对象昂，即Array.prototype.slice.call(arguments)</p>\n<h5 id=\"splice()\">splice()<a title=\"#splice()\" href=\"#splice()\"></a></h5>\n<p>splice() 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> months = [<span class=\"string\">&#x27;Jan&#x27;</span>, <span class=\"string\">&#x27;March&#x27;</span>, <span class=\"string\">&#x27;April&#x27;</span>, <span class=\"string\">&#x27;June&#x27;</span>];</span><br><span class=\"line\">months.<span class=\"title function_\">splice</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"string\">&#x27;Feb&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// inserts at index 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(months);</span><br><span class=\"line\"><span class=\"comment\">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;June&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">months.<span class=\"title function_\">splice</span>(<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"string\">&#x27;May&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// replaces 1 element at index 4</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(months);</span><br><span class=\"line\"><span class=\"comment\">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"sort()\">sort()<a title=\"#sort()\" href=\"#sort()\"></a></h5>\n<p>对数组进行排序<br>\n默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> items = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Edward&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"number\">21</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Sharpe&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"number\">37</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;And&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"number\">45</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;The&#x27;</span>, <span class=\"attr\">value</span>: -<span class=\"number\">12</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Magnetic&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Zeros&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"number\">37</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sort by value</span></span><br><span class=\"line\">items.<span class=\"title function_\">sort</span>(<span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a.<span class=\"property\">value</span> - b.<span class=\"property\">value</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(items)</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* [</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;The&#x27;, value: -12 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;Edward&#x27;, value: 21 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;Sharpe&#x27;, value: 37 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;And&#x27;, value: 45 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;Magnetic&#x27; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;Zeros&#x27;, value: 37 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\">* */</span></span><br><span class=\"line\"><span class=\"comment\">// sort by name</span></span><br><span class=\"line\">items.<span class=\"title function_\">sort</span>(<span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nameA = a.<span class=\"property\">name</span>.<span class=\"title function_\">toUpperCase</span>(); <span class=\"comment\">// ignore upper and lowercase</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nameB = b.<span class=\"property\">name</span>.<span class=\"title function_\">toUpperCase</span>(); <span class=\"comment\">// ignore upper and lowercase</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nameA &lt; nameB) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nameA &gt; nameB) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">// names must be equal</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(items)</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">[</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;And&#x27;, value: 45 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;Edward&#x27;, value: 21 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;Magnetic&#x27; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;Sharpe&#x27;, value: 37 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;The&#x27;, value: -12 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; name: &#x27;Zeros&#x27;, value: 37 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"tostring()和join()\">toString()和join()<a title=\"#tostring()和join()\" href=\"#tostring()和join()\"></a></h5>\n<p>join() 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。<br>\ntoString() 返回一个字符串，表示指定的数组及其元素。<br>\n两者区别不大，只是join()可以接受一个作为分隔符。</p>\n<h4 id=\"string.prototype方法\">String.prototype方法<a title=\"#string.prototype方法\" href=\"#string.prototype方法\"></a></h4>\n<h5 id=\"fromcharcode()\">fromCharCode()<a title=\"#fromcharcode()\" href=\"#fromcharcode()\"></a></h5>\n<p>静态 String.fromCharCode() 方法返回由指定的UTF-16代码单元序列创建的字符串。</p>\n<h5 id=\"charat()\">charAt()<a title=\"#charat()\" href=\"#charat()\"></a></h5>\n<p>charAt() 方法从一个字符串中返回指定的字符。参数为下标</p>\n<h5 id=\"charcodeat()\">charCodeAt()<a title=\"#charcodeat()\" href=\"#charcodeat()\"></a></h5>\n<p>返回指定下标出对应字符的UTF-16的编码值</p>\n<h5 id=\"concat()\">concat()<a title=\"#concat()\" href=\"#concat()\"></a></h5>\n<p>concat() 方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。</p>\n<h5 id=\"match()\">match()<a title=\"#match()\" href=\"#match()\"></a></h5>\n<p>match() 方法检索返回一个字符串匹配正则表达式的的结果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> regexp = <span class=\"regexp\">/[A-E]/gi</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> matches_array = str.<span class=\"title function_\">match</span>(regexp);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matches_array);</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"substring()\">substring()<a title=\"#substring()\" href=\"#substring()\"></a></h5>\n<p>substring() 方法返回一个字符串在开始索引到结束索引之间的一个子集, 或从开始索引直到字符串的末尾的一个子集。</p>\n<h5 id=\"replace()\">replace()<a title=\"#replace()\" href=\"#replace()\"></a></h5>\n<p>replace() 方法返回一个由替换值（replacement）替换一些或所有匹配的模式（pattern）后的新字符串。模式可以是一个字符串或者一个正则表达式，替换值可以是一个字符串或者一个每次匹配都要调用的回调函数。<br>\n原字符串不会改变。<br>\n语法：str.replace(regexp|substr, newSubStr|function)</p>\n<ul>\n<li>regexp (pattern)一个RegExp 对象或者其字面量。该正则所匹配的内容会被第二个参数的返回值替换掉。</li>\n<li>substr (pattern)一个将被 newSubStr 替换的 字符串。其被视为一整个字符串，而不是一个正则表达式。仅第一个匹配项会被替换。</li>\n<li>newSubStr (replacement)用于替换掉第一个参数在原字符串中的匹配部分的字符串。该字符串中可以内插一些特殊的变量名。参考下面的使用字符串作为参数。</li>\n<li>function (replacement)一个用来创建新子字符串的函数，该函数的返回值将替换掉第一个参数匹配到的结果。参考下面的指定一个函数作为参数。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;Twas the night before Xmas...&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newstr = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/xmas/i</span>, <span class=\"string\">&#x27;Christmas&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newstr);  <span class=\"comment\">// Twas the night before Christmas...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/apples/gi</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;Apples are round, and apples are juicy.&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newstr = str.<span class=\"title function_\">replace</span>(re, <span class=\"string\">&quot;oranges&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// oranges are round, and oranges are juicy.</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newstr);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"search()\">search()<a title=\"#search()\" href=\"#search()\"></a></h5>\n<p>search() 方法执行正则表达式和 String 对象之间的一个搜索匹配。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;hey JudE&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/[A-Z]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re2 = <span class=\"regexp\">/[.]/g</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">search</span>(re)); <span class=\"comment\">// returns 4, which is the index of the first capital letter &quot;J&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">search</span>(re2)); <span class=\"comment\">// returns -1 cannot find &#x27;.&#x27; dot punctuation</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"trim()\">trim()<a title=\"#trim()\" href=\"#trim()\"></a></h5>\n<p>trim() 方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR等）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> orig = <span class=\"string\">&#x27;   foo  &#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(orig.<span class=\"title function_\">trim</span>()); <span class=\"comment\">// &#x27;foo&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 另一个 .trim() 例子，只从一边删除</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> orig = <span class=\"string\">&#x27;foo    &#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(orig.<span class=\"title function_\">trim</span>()); <span class=\"comment\">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>\n","prev":{"title":"leeocde-148-链表排序","link":"2020/06/09/leeocde-链表排序"},"next":{"title":"javaScript常用字符串以及数组处理函数","link":"2020/05/28/javaScript常用字符串以及数组处理函数"},"plink":"https://edsion11.github.io/2020/06/05/JavaScript常用字符串以及数组处理函数2/","toc":[{"id":"string.prototype方法","title":"String.prototype方法","index":"1"}],"copyright":{"author":"Edsion Gu","link":"<a href=\"https://edsion11.github.io/2020/06/05/JavaScript常用字符串以及数组处理函数2/\" title=\"JavaScript常用字符串以及数组处理函数2\">https://edsion11.github.io/2020/06/05/JavaScript常用字符串以及数组处理函数2/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}