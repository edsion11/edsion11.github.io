{"title":"leeocde-148-链表排序","date":"2020-06-09T19:44:10.000Z","date_formatted":{"ll":"Jun 9, 2020","L":"06/09/2020","MM-DD":"06-09"},"link":"2020/06/09/leeocde-链表排序","tags":["归并排序","链表"],"categories":["leetcode"],"updated":"2022-01-22T09:45:40.642Z","content":"<h4 id=\"leetcode-148-链表排序\">leetcode-148-链表排序<a title=\"#leetcode-148-链表排序\" href=\"#leetcode-148-链表排序\"></a></h4>\n<h5 id=\"题目描述：\">题目描述：<a title=\"#题目描述：\" href=\"#题目描述：\"></a></h5>\n<p>在 O(n<em>log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。<br>\n分析：看到O(n</em>log n)的时间复杂度以及O(1)的空间复杂度。确定使用归并排序作为主要程序结构。</p>\n<p>在归并排序中，体现了分而治之的思想：利用递归算法将链表分解一个个递归基：单节点。分解利用二分的思想，逐渐分解。但链表结构不同于向量结构，向量是循秩访问，可以求出中间元素的秩。链表则是通过节点间联系访问。这里是难点之一，解决方法是利用双指针法：设置快慢两个指针，快的走两步，慢的走一步，而且快指针定义在慢指针初始位置的下一位。这样当快指针为<code>null</code>时，慢指针刚好到中间。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> mid = node</span><br><span class=\"line\"><span class=\"keyword\">let</span> fast = node.<span class=\"property\">next</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (fast &amp;&amp; fast.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">  mid = mid.<span class=\"property\">next</span></span><br><span class=\"line\">  fast = fast.<span class=\"property\">next</span>.<span class=\"property\">next</span></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>链表多种操作会用到双指针的方法，这里<code>while</code>语句利用短路表达式<code>&amp;&amp;</code>，使代码可读性高，易于理解。<br>\n有了这关键的一步，就可以递归了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mergeSort</span>(<span class=\"params\">node</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node || !node.<span class=\"property\">next</span>) <span class=\"keyword\">return</span> node</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = node</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = node.<span class=\"property\">next</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast &amp;&amp; fast.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      mid = mid.<span class=\"property\">next</span></span><br><span class=\"line\">      fast = fast.<span class=\"property\">next</span>.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rightList = mid.<span class=\"property\">next</span></span><br><span class=\"line\">    mid.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = node</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = rightList</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">mergeList</span>(<span class=\"title function_\">mergeSort</span>(left), <span class=\"title function_\">mergeSort</span>(right))<span class=\"comment\">//这里的mergeSort是合并算法</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>递归完成后就要合并了，合并和正常归并排序一致，将左链表与右链表逐一比较，较小者连接到头节点，即可。<br>\n附上完整代码实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">head</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">ListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">head</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">ListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ListNode</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = val</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sortList = <span class=\"keyword\">function</span> (<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   *  合并每个递归基</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">left</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">right</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">mergeList</span>(<span class=\"params\">left, right</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = res</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &amp;&amp; right) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (left.<span class=\"property\">val</span> &lt;= right.<span class=\"property\">val</span>) &#123;</span><br><span class=\"line\">        pre.<span class=\"property\">next</span> = left</span><br><span class=\"line\">        left = left.<span class=\"property\">next</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        pre.<span class=\"property\">next</span> = right</span><br><span class=\"line\">        right = right.<span class=\"property\">next</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      pre = pre.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pre.<span class=\"property\">next</span> = left ? left : right</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"property\">next</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 递归至每个递归基</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">node</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">mergeSort</span>(<span class=\"params\">node</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node || !node.<span class=\"property\">next</span>) <span class=\"keyword\">return</span> node</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = node</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = node.<span class=\"property\">next</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast &amp;&amp; fast.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      mid = mid.<span class=\"property\">next</span></span><br><span class=\"line\">      fast = fast.<span class=\"property\">next</span>.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rightList = mid.<span class=\"property\">next</span></span><br><span class=\"line\">    mid.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = node</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = rightList</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">mergeList</span>(<span class=\"title function_\">mergeSort</span>(left), <span class=\"title function_\">mergeSort</span>(right))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">mergeSort</span>(head)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>当然归并排序比较复杂，链表排序方法中，容易理解以及使用的还有插入排序，这在leetocde-147.<br>\n在数组中插入元素比较麻烦，但可以转化为元素互换，而在链表中插入是个比较容易的操作。所以插入排序很适用。这里直接贴题解代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">head</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">ListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> insertionSortList = <span class=\"keyword\">function</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 边界条件</span></span><br><span class=\"line\">    <span class=\"comment\">// 哨兵节点</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> preHead = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 将要移动重新插入链表中的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> curr = head;</span><br><span class=\"line\">    <span class=\"comment\">// 插入链表中的前驱位置 插入pre和pre.next之间</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = preHead;</span><br><span class=\"line\">    <span class=\"comment\">// 下一个将要移动插入的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(curr)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 保存下一个将要插入的元素</span></span><br><span class=\"line\">        next = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 寻找插入的前驱位置</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(pre.<span class=\"property\">next</span> &amp;&amp; pre.<span class=\"property\">next</span>.<span class=\"property\">val</span> &lt; curr.<span class=\"property\">val</span>)&#123;</span><br><span class=\"line\">            pre = pre.<span class=\"property\">next</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 插入</span></span><br><span class=\"line\">        curr.<span class=\"property\">next</span> = pre.<span class=\"property\">next</span>;</span><br><span class=\"line\">        pre.<span class=\"property\">next</span> = curr;</span><br><span class=\"line\">        <span class=\"comment\">// 从头或者从左到右开始遍历</span></span><br><span class=\"line\">        pre = preHead;</span><br><span class=\"line\">        <span class=\"comment\">// 下一个</span></span><br><span class=\"line\">        curr = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> preHead.<span class=\"property\">next</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>代码中有详细注释，就不用解释了。整体代码简洁，容易理解，可以更好的理解插入排序。</p>\n","prev":{"title":"手动实现的call,apply,bind,new","link":"2020/06/27/手动实现的call-apply-bind-new"},"next":{"title":"JavaScript常用字符串以及数组处理函数2","link":"2020/06/05/JavaScript常用字符串以及数组处理函数2"},"plink":"https://edsion11.github.io/2020/06/09/leeocde-链表排序/","toc":[{"id":"leetcode-148-链表排序","title":"leetcode-148-链表排序","index":"1"}],"copyright":{"author":"Edsion Gu","link":"<a href=\"https://edsion11.github.io/2020/06/09/leeocde-链表排序/\" title=\"leeocde-148-链表排序\">https://edsion11.github.io/2020/06/09/leeocde-链表排序/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}