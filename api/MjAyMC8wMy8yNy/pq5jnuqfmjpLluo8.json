{"title":"高级排序","date":"2020-03-27T15:57:33.000Z","date_formatted":{"ll":"Mar 27, 2020","L":"03/27/2020","MM-DD":"03-27"},"link":"2020/03/27/高级排序","tags":["希尔排序","快速排序","高级排序"],"updated":"2022-01-22T09:45:40.644Z","content":"<h4> 希尔排序 </h4>\n<p>希尔排序的工作原理是，通过定义一个间隔序列来表示在排序过程中进行比较的元素之\n间有多远的间隔。我们可以动态定义间隔序列，不过对于大部分的实际应用场景，算法\n要用到的间隔序列可以提前定义好。有一些公开定义的间隔序列，使用它们会得到不同\n的结果。在这里我们用到了 Marcin Ciura 在他 2001 年发表的论文“Best Increments for the\nAverage Case of Shell Sort”（http:bit.ly/1b04YFv,2001）中定义的间隔序列。这个间隔序列\n是：701, 301, 132, 57, 23, 10, 4, 1。</p>\n<h5>首先是希尔排序的js写法</h5>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">123</span>,<span class=\"number\">34</span>,<span class=\"number\">5</span>,<span class=\"number\">66</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">43</span>,<span class=\"number\">52</span>,<span class=\"number\">45</span>,<span class=\"number\">47</span>,<span class=\"number\">48</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> gaps=[<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shellSort</span>(<span class=\"params\">arr,gaps</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> g=<span class=\"number\">0</span>;g &lt; gaps.length; ++g)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span> ; i &lt; arr.length ; ++i)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> temp = arr[i]</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i; j &gt;= gaps[g] &amp;&amp; arr[j-gaps[g]] &gt; temp ; j-=gaps[g])&#123;</span><br><span class=\"line\">        arr[j]=arr[j-gaps[g]]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      arr[j]=temp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5>实际就是:</h5>\n<p>外循环控制间隔序列的移动。也就是说，算法在第一次处理数据集时，会检查所有间隔为\n5 的元素。下一次遍历会检查所有间隔为 3 的元素。最后一次则会对间隔为 1 的元素，也\n就是相邻元素执行标准插入排序。在开始做最后一次处理时，大部分元素都将在正确的位\n置，算法就不必对很多元素进行交换。这就是希尔排序比插入排序更高效的地方。图 12-3\n演示了如何使用间隔序列为 5, 3, 1 的希尔排序算法，对一个包含 10 个随机数字的数据集\n合进行排序。\n</p>\n原理图如下：\n<img src=\"/images/希尔排序原理.png\"></img>\n<h5>计算动态间隔序列</h5><p>《算法（第 4 版）》（人民邮电出版社）的合著者 Robert Sedgewick 定义了一个 shellsort()\n函数，在这个函数中可以通过一个公式来对希尔排序用到的间隔序列进行动态计算。\nSedgewick 的算法是通过下面的代码片段来决定初始间隔值的：\n</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> N = <span class=\"keyword\">this</span>.dataStore.length</span><br><span class=\"line\"><span class=\"keyword\">var</span> h = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (h &lt; N / <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  h = <span class=\"number\">3</span> * h + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>间隔值确定好后，这个函数就可以像之前定义的 shellsort() 函数一样运行了，唯一的区\n别是，回到外循环之前的最后一条语句会计算一个新的间隔值：</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h = <span class=\"number\">3</span> * h + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure><h6>举例如下:</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shellSort</span> (<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> N = arr.length;</span><br><span class=\"line\"><span class=\"keyword\">var</span> h = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(h&lt;N/<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">h = h \\* <span class=\"number\">3</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(h&gt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=h;i&lt;N;i++)&#123;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(j=i;j &gt; = h &amp;&amp; arr[j] &lt; arr[j-h];j-=h)&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = arr[j-h]</span><br><span class=\"line\">arr[j-h]=arr[j]</span><br><span class=\"line\">arr[j] = temp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">h=(h<span class=\"number\">-1</span>)/<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>在运算时间上，前后两个算法相差一个 while()循环来取 gaps[]值，前者设定了[5,3,1],后者通过计算得到 gaps 数组。</p>\n<h4>快速排序</h4>\n快速排序是处理大数据集最快的排序算法之一，它是一种分而治之的算法，通过递归的方式将数据分解为包含较小元素和较大元素的不同子序列\n这个算法首先要在列表中选择一个元素作为基准值（pivot）。数据排序围绕基准值进行，将列表中小于基准值的元素移到数组的底部，将大于基准值的元素移到数组的顶部。\n如图所示：\n<img src=\"/images/快速排序.jpg\"></img><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">QuickSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> []</span><br><span class=\"line\">  <span class=\"keyword\">var</span> left = []</span><br><span class=\"line\">  <span class=\"keyword\">var</span> right = []</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pivot = arr[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//此处留意i=1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class=\"line\">      left.push(arr[i])</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      right.push(arr[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> QuickSort(left).concat(pivot, QuickSort(right))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>以下获取每次循环的输出，解释了快速排序的运行原理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">9</span>,<span class=\"number\">3</span>,<span class=\"number\">93</span>,<span class=\"number\">9</span>,<span class=\"number\">65</span>,<span class=\"number\">94</span>,<span class=\"number\">50</span>,<span class=\"number\">90</span>,<span class=\"number\">12</span>,<span class=\"number\">65</span></span><br><span class=\"line\">基准值：<span class=\"number\">9</span> 当前元素：<span class=\"number\">3</span></span><br><span class=\"line\">移动 <span class=\"number\">3</span> 到左边</span><br><span class=\"line\">基准值：<span class=\"number\">9</span> 当前元素：<span class=\"number\">93</span></span><br><span class=\"line\">移动 <span class=\"number\">93</span> 到右边</span><br><span class=\"line\">基准值：<span class=\"number\">9</span> 当前元素：<span class=\"number\">9</span></span><br><span class=\"line\">移动 <span class=\"number\">9</span> 到右边</span><br><span class=\"line\">基准值：<span class=\"number\">9</span> 当前元素：<span class=\"number\">65</span></span><br><span class=\"line\">移动 <span class=\"number\">65</span> 到右边</span><br><span class=\"line\">基准值：<span class=\"number\">9</span> 当前元素：<span class=\"number\">94</span></span><br><span class=\"line\">移动 <span class=\"number\">94</span> 到右边</span><br><span class=\"line\">基准值：<span class=\"number\">9</span> 当前元素：<span class=\"number\">50</span></span><br><span class=\"line\">移动 <span class=\"number\">50</span> 到右边</span><br><span class=\"line\">基准值：<span class=\"number\">9</span> 当前元素：<span class=\"number\">90</span></span><br><span class=\"line\">移动 <span class=\"number\">90</span> 到右边</span><br><span class=\"line\">基准值：<span class=\"number\">9</span> 当前元素：<span class=\"number\">12</span></span><br><span class=\"line\">移动 <span class=\"number\">12</span> 到右边</span><br><span class=\"line\">基准值：<span class=\"number\">9</span> 当前元素：<span class=\"number\">65</span></span><br><span class=\"line\">移动 <span class=\"number\">65</span> 到右边</span><br><span class=\"line\">基准值：<span class=\"number\">93</span> 当前元素：<span class=\"number\">9</span></span><br><span class=\"line\">移动 <span class=\"number\">9</span> 到左边</span><br><span class=\"line\">基准值：<span class=\"number\">93</span> 当前元素：<span class=\"number\">65</span></span><br><span class=\"line\">移动 <span class=\"number\">65</span> 到左边</span><br><span class=\"line\">基准值：<span class=\"number\">93</span> 当前元素：<span class=\"number\">94</span></span><br><span class=\"line\">移动 <span class=\"number\">94</span> 到右边</span><br><span class=\"line\">基准值：<span class=\"number\">93</span> 当前元素：<span class=\"number\">50</span></span><br><span class=\"line\">移动 <span class=\"number\">50</span> 到左边</span><br><span class=\"line\">基准值：<span class=\"number\">93</span> 当前元素：<span class=\"number\">90</span></span><br><span class=\"line\">移动 <span class=\"number\">90</span> 到左边</span><br><span class=\"line\">基准值：<span class=\"number\">93</span> 当前元素：<span class=\"number\">12</span></span><br><span class=\"line\">移动 <span class=\"number\">12</span> 到左边</span><br><span class=\"line\">基准值：<span class=\"number\">93</span> 当前元素：<span class=\"number\">65</span></span><br><span class=\"line\">移动 <span class=\"number\">65</span> 到左边</span><br><span class=\"line\">基准值：<span class=\"number\">9</span> 当前元素：<span class=\"number\">65</span></span><br><span class=\"line\">移动 <span class=\"number\">65</span> 到右边</span><br><span class=\"line\">基准值：<span class=\"number\">9</span> 当前元素：<span class=\"number\">50</span></span><br><span class=\"line\">移动 <span class=\"number\">50</span> 到右边</span><br><span class=\"line\">基准值：<span class=\"number\">9</span> 当前元素：<span class=\"number\">90</span></span><br><span class=\"line\">移动 <span class=\"number\">90</span> 到右边</span><br><span class=\"line\">基准值：<span class=\"number\">9</span> 当前元素：<span class=\"number\">12</span></span><br><span class=\"line\">移动 <span class=\"number\">12</span> 到右边</span><br><span class=\"line\">基准值：<span class=\"number\">9</span> 当前元素：<span class=\"number\">65</span></span><br><span class=\"line\">移动 <span class=\"number\">65</span> 到右边</span><br><span class=\"line\">基准值：<span class=\"number\">65</span> 当前元素：<span class=\"number\">50</span></span><br><span class=\"line\">移动 <span class=\"number\">50</span> 到左边</span><br><span class=\"line\">基准值：<span class=\"number\">65</span> 当前元素：<span class=\"number\">90</span></span><br><span class=\"line\">移动 <span class=\"number\">90</span> 到右边</span><br><span class=\"line\">排序算法 ｜ <span class=\"number\">167</span></span><br><span class=\"line\">基准值：<span class=\"number\">65</span> 当前元素：<span class=\"number\">12</span></span><br><span class=\"line\">移动 <span class=\"number\">12</span> 到左边</span><br><span class=\"line\">基准值：<span class=\"number\">65</span> 当前元素：<span class=\"number\">65</span></span><br><span class=\"line\">移动 <span class=\"number\">65</span> 到右边</span><br><span class=\"line\">基准值：<span class=\"number\">50</span> 当前元素：<span class=\"number\">12</span></span><br><span class=\"line\">移动 <span class=\"number\">12</span> 到左边</span><br><span class=\"line\">基准值：<span class=\"number\">90</span> 当前元素：<span class=\"number\">65</span></span><br><span class=\"line\">移动 <span class=\"number\">65</span> 到左边</span><br><span class=\"line\"><span class=\"number\">3</span>,<span class=\"number\">9</span>,<span class=\"number\">9</span>,<span class=\"number\">12</span>,<span class=\"number\">50</span>,<span class=\"number\">65</span>,<span class=\"number\">65</span>,<span class=\"number\">90</span>,<span class=\"number\">93</span>,<span class=\"number\">94</span></span><br></pre></td></tr></table></figure><p>本次文章到此结束</p>\n","prev":{"title":"http状态码","link":"2020/03/29/http状态码"},"next":{"title":"GET和POST的区别","link":"2020/03/26/GET和POST的区别"},"plink":"https://edsion11.github.io/2020/03/27/高级排序/","toc":[{"id":"","title":" 希尔排序 ","index":"1"},{"id":"","title":"快速排序","index":"2"}],"copyright":{"author":"Edsion Gu","link":"<a href=\"https://edsion11.github.io/2020/03/27/高级排序/\" title=\"高级排序\">https://edsion11.github.io/2020/03/27/高级排序/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}